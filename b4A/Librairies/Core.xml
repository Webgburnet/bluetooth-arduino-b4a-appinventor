<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>anywheresoftware.b4a.objects.drawable.StateListDrawable</name>
        <shortname>StateListDrawable</shortname>
        <comment>A drawable that holds other drawables and chooses the current one based on the view's state.
See the &lt;link&gt;StateListDrawable example|http://www.basic4ppc.com/forum/basic4android-getting-started-tutorials/6589-statelistdrawable-example.html&lt;/link&gt;.</comment>
        <objectwrapper>android.graphics.drawable.StateListDrawable</objectwrapper>
        <owner>activity</owner>
        <method>
            <name>AddState2</name>
            <comment>Adds a state and drawable pair. The state is made from a combination of states.
You should not reuse the array specified as it is used internally by StateListDrawable.
Note that the order of states is very important. The first state that matches will be used.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>State</name>
                <type>int[]</type>
            </parameter>
            <parameter>
                <name>Drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
        </method>
        <method>
            <name>AddState</name>
            <comment>Adds a state and drawable pair.
Note that the order of states is very important. The first state that matches will be used.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>State</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
        </method>
        <method>
            <name>AddCatchAllState</name>
            <comment>Adds the drawable that will be used if no other state matched the current state.
This should always be the last state (states added after this one will never be used).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the object.
Example:&lt;code&gt;
Dim Button1 As Button
Button1.Initialize("")
Dim sld As StateListDrawable
sld.Initiailze
sld.AddState (sld.State_Disabled, DisabledDrawable)
sld.AddState (sld.State_Pressed, PressedDrawable)
sld.AddCatchAllState (DefaultDrawable)
Button1.Background = sld&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <field>
            <name>State_Enabled</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>State_Checked</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>State_Focused</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>State_Unchecked</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>State_Pressed</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>State_Disabled</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>State_Selected</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.drawable.GradientDrawable</name>
        <shortname>GradientDrawable</shortname>
        <comment>A drawable that has a gradient color and can have round corners.</comment>
        <objectwrapper>android.graphics.drawable.GradientDrawable</objectwrapper>
        <owner>activity</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes this object.
Orientation - The gradient orientation. Can be one of the following value:
"TOP_BOTTOM"
"TR_BL" (Top-Right to Bottom-Left)
"RIGHT_LEFT"
"BR_TL" (Bottom-Right to Top-Left)
"BOTTOM_TOP"
"BL_TR" (Bottom-Left to Top-Right)
"LEFT_RIGHT"
"TL_BR" (Top-Left to Bottom-Right)
 
Colors - An array with the gradient colors.
 
Example:&lt;code&gt;
Dim Gradient1 As GradientDrawable
Dim Clrs(2) As Int
Clrs(0) = Colors.Black
Clrs(1) = Colors.White
Gradient1.Initialize("TOP_BOTTOM", Clrs)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Orientation</name>
                <type EnumType="true">android.graphics.drawable.GradientDrawable.Orientation</type>
            </parameter>
            <parameter>
                <name>Colors</name>
                <type>int[]</type>
            </parameter>
        </method>
        <property>
            <name>CornerRadius</name>
            <parameter>
                <name>Radius</name>
                <type>float</type>
            </parameter>
            <comment>Sets the radius of the "rectangle" corners.
Set to 0 for square corners.
 
Example:&lt;code&gt;
Gradient1.CornerRadius = 20dip&lt;/code&gt;</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.drawable.ColorDrawable</name>
        <shortname>ColorDrawable</shortname>
        <comment>A drawable that has a solid color and can have round corners.
Example:&lt;code&gt;
Dim cd As ColorDrawable
cd.Initialize(Colors.Green, 5dip)
Button1.Background = cd&lt;/code&gt;</comment>
        <objectwrapper>android.graphics.drawable.Drawable</objectwrapper>
        <owner>activity</owner>
        <method>
            <name>Initialize2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BorderWidth</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>BorderColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the drawable with the given color and corners radius.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CornerRadius</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.drawable.CanvasWrapper</name>
        <shortname>Canvas</shortname>
        <comment>A Canvas is an object that draws on other views or (mutable) bitmaps.
When the canvas is initialized and set to draw on a view, a new mutable bitmap is created for that view background, the current view's background
is copied to the new bitmap and the canvas is set to draw on the new bitmap.
The canvas drawings are not immediately updated on the screen. You should call the target view Invalidate method to make it refresh the view.
This is useful as it allows you to make several drawings and only then refresh the display.
The canvas can be temporary limited to a specific region (and thus only affect this region). This is done by calling ClipPath. Removing the clipping is done by calling RemoveClip.
You can get the bitmap that the canvas draws on with the Bitmap property.</comment>
        <owner>activity</owner>
        <method>
            <name>DrawText</name>
            <comment>Draws the text.
Text - The text to be drawn.
x, y - The origin point.
Typeface1 - Typeface (font) to use.
TextSize - This value will be automatically scaled so do not scale it yourself.
Color - Text color.
Align - The alignment related to the origin. One of the following values: "LEFT", "CENTER", "RIGHT".
Example:&lt;code&gt;
Canvas1.DrawText("This is a nice sentence.", 200dip, 200dip, Typeface.DEFAULT_BOLD, 30, Colors.Blue, "LEFT")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Typeface1</name>
                <type>android.graphics.Typeface</type>
            </parameter>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Align1</name>
                <type EnumType="true">android.graphics.Paint.Align</type>
            </parameter>
        </method>
        <method>
            <name>MeasureStringWidth</name>
            <comment>Returns the width of the given text.
Example of drawing a blue text with white rectangle as the background:&lt;code&gt;
Dim Rect1 As Rect
Dim width, height As Float
Dim t As String
t = "Text to write"
width = Canvas1.MeasureStringWidth(t, Typeface.DEFAULT, 14)
height = Canvas1.MeasureStringHeight(t, Typeface.DEFAULT, 14)
Rect1.Initialize(100dip, 100dip, 100dip + width, 100dip + height)
Canvas1.DrawRect(Rect1, Colors.White, True, 0)
Canvas1.DrawText(t, Rect1.Left, Rect1.Bottom, Typeface.DEFAULT, 14, Colors.Blue, "LEFT")&lt;/code&gt;</comment>
            <returntype>float</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>DrawBitmap</name>
            <comment>Draws a bitmap.
SrcRect - The subset of the bitmap that will be drawn. If Null then the complete bitmap will be drawn.
DestRect - The rectangle that the bitmap will be drawn to.

Example:&lt;code&gt;
Dim Bitmap1 As Bitmap
Bitmap1.Initialize(File.DirAssets, "X.jpg")
Dim DestRect As Rect
DestRect.Initialize(10dip, 10dip, 10dip + 100dip, 10dip + 100dip)
Canvas1.DrawBitmap(Bitmap1, Null, DestRect) 'draws the bitmap to the destination rectangle.

Dim SrcRect As Rect
SrcRect.Initialize(0, 0, Bitmap1.Width / 2, Bitmap1.Height) 'the left half of the bitmap.
DestRect.Top = 200dip
DestRect.Bottom = 200dip + 100dip
Canvas1.DrawBitmap(Bitmap1, SrcRect, DestRect) 'draws half of the bitmap.
Activity.Invalidate&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Bitmap1</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>SrcRect</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>DestRect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>DrawDrawable</name>
            <comment>Draws a Drawable into the specified rectangle.
 
Example:&lt;code&gt;
Dim Gradient1 As GradientDrawable
Dim Clrs(2) As Int
Clrs(0) = Colors.Green
Clrs(1) = Colors.Blue
Gradient1.Initialize("TOP_BOTTOM", Clrs)
Canvas1.DrawDrawable(Gradient1, DestRect)
Activity.Invalidate&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Drawable1</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <parameter>
                <name>DestRect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>DrawPath</name>
            <comment>Draws the path.
Filled - Whether the path will be filled.
StrokeWidth - The stroke width. Relevant when Filled = False.
Example:&lt;code&gt;
Dim Path1 As Path
Path1.Initialize(50%x, 100%y)
Path1.LineTo(100%x, 50%y)
Path1.LineTo(50%x, 0%y)
Path1.LineTo(0%x, 50%y)
Path1.LineTo(50%x, 100%y)
Canvas1.DrawPath(Path1, Colors.Magenta, False, 10dip)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Path1</name>
                <type>android.graphics.Path</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Filled</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>StrokeWidth</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>DrawTextRotated</name>
            <comment>Rotates the text and draws it.
Text - The text to be drawn.
x, y - The origin point.
Typeface1 - Typeface (font) to use.
TextSize - This value will be automatically scaled so do not scale it yourself.
Color - Text color.
Align - The alignment related to the origin. One of the following values: "LEFT", "CENTER", "RIGHT".
Degrees - Number of degrees to rotate (clockwise).
Example:&lt;code&gt;
Canvas1.DrawTextRotated("This is a nice sentence.", 200dip, 200dip, _
  Typeface.DEFAULT_BOLD, 30, Colors.Blue, "CENTER", -45)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Typeface1</name>
                <type>android.graphics.Typeface</type>
            </parameter>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Align1</name>
                <type EnumType="true">android.graphics.Paint.Align</type>
            </parameter>
            <parameter>
                <name>Degree</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>DrawBitmapFlipped</name>
            <comment>Flips the bitmap and draws it.
SrcRect - The subset of the bitmap that will be drawn. If Null then the complete bitmap will be drawn.
DestRect - The rectangle that the bitmap will be drawn to.
Vertically - Whether to flip the bitmap vertically.
Horizontally - Whether to flip the bitmap horizontally.
Example:&lt;code&gt;
Canvas1.DrawBitmapFlipped(Bitmap1, Null, DestRect, False, True)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Bitmap1</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>SrcRect</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>DestRect</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>Vertically</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>Horizontally</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>DrawOvalRotated</name>
            <comment>Rotates the oval and draws it.
Filled - Whether the rectangle will be filled.
StrokeWidth - The stroke width. Relevant when Filled = False.
Degrees - Number of degrees to rotate the oval (clockwise).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect1</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Filled</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>StrokeWidth</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Degrees</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the canvas for drawing on a view.
The view background will be drawn on the canvas during initialization.
Note that you should not change the view's background after calling this method.

Example: &lt;code&gt;
Dim Canvas1 As Canvas
Canvas1.Initialize(Activity) 'this canvas will draw on the activity background&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Target</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>DrawCircle</name>
            <comment>Draws a circle.
Filled - Whether the circle will be filled.
StrokeWidth - The stroke width. Relevant when Filled = False.

Example:&lt;code&gt;
Canvas1.DrawCircle(150dip, 150dip, 20dip, Colors.Red, False, 10dip)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Radius</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Filled</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>StrokeWidth</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>DrawPoint</name>
            <comment>Draws a point at the specified position and color.
 
Example:&lt;code&gt;
Canvas1.DrawPoint(50%x, 50%y, Colors.Yellow) 'draws a point in the middle of the screen.&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>RemoveClip</name>
            <comment>Removes previous clipped region.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>DrawBitmapRotated</name>
            <comment>Rotates the bitmap and draws it.
SrcRect - The subset of the bitmap that will be drawn. If Null then the complete bitmap will be drawn.
DestRect - The rectangle that the bitmap will be drawn to.
Degrees - Number of degrees to rotate the bitmap (clockwise).
Example:&lt;code&gt;
Canvas1.DrawBitmapRotated(Bitmap1, Null, DestRect, 70)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Bitmap1</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>SrcRect</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>DestRect</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>Degrees</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Initializes the canvas for drawing on this bitmap.
The bitmap must be mutable. Bitmaps created from files or input streams are NOT mutable.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>DrawLine</name>
            <comment>Draws a line from (x1, y1) to (x2, y2). StrokeWidth determines the width of the line.
Example:&lt;code&gt;
Canvas1.DrawLine(100dip, 100dip, 200dip, 200dip, Colors.Red, 10dip)
Activity.Invalidate
&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>StrokeWidth</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>DrawOval</name>
            <comment>Draws an oval shape.
Filled - Whether the rectangle will be filled.
StrokeWidth - The stroke width. Relevant when Filled = False.

Example:&lt;code&gt;
Dim Rect1 As Rect
Rect1.Initialize(100dip, 100dip, 200dip, 150dip)
Canvas1.DrawOval(Rect1, Colors.Gray, False, 5dip)
Activity.Invalidate&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect1</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Filled</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>StrokeWidth</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>DrawRect</name>
            <comment>Draws a rectangle.
Filled - Whether the rectangle will be filled.
StrokeWidth - The stroke width. Relevant when Filled = False.

Example:&lt;code&gt;
Dim Rect1 As Rect
Rect1.Initialize(100dip, 100dip, 200dip, 150dip)
Canvas1.DrawRect(Rect1, Colors.Gray, False, 5dip)
Activity.Invalidate&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect1</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Filled</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>StrokeWidth</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>MeasureStringHeight</name>
            <comment>Returns the height of the given text.
Example of drawing a blue text with white rectangle as the background:&lt;code&gt;
Dim Rect1 As Rect
Dim width, height As Float
Dim t As String
t = "Text to write"
width = Canvas1.MeasureStringWidth(t, Typeface.DEFAULT, 14)
height = Canvas1.MeasureStringHeight(t, Typeface.DEFAULT, 14)
Rect1.Initialize(100dip, 100dip, 100dip + width, 100dip + height)
Canvas1.DrawRect(Rect1, Colors.White, True, 0)
Canvas1.DrawText(t, Rect1.Left, Rect1.Bottom, Typeface.DEFAULT, 14, Colors.Blue, "LEFT")&lt;/code&gt;</comment>
            <returntype>float</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>DrawRectRotated</name>
            <comment>Rotates the rectangle and draws it.
Filled - Whether the rectangle will be filled.
StrokeWidth - The stroke width. Relevant when Filled = False.
Degrees - Number of degrees to rotate the rectangle (clockwise).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect1</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Filled</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>StrokeWidth</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Degrees</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>DrawDrawableRotate</name>
            <comment>Rotates and draws a Drawable into the specified rectangle.
Degrees - Number of degrees to rotate (clockwise).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Drawable1</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <parameter>
                <name>DestRect</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>Degrees</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>ClipPath</name>
            <comment>Clips the drawing area to the given path.
 
Example: Fills a diamond shape with gradient color.&lt;code&gt;
Dim Gradient1 As GradientDrawable
Dim Clrs(2) As Int
Clrs(0) = Colors.Black
Clrs(1) = Colors.White
Gradient1.Initialize("TOP_BOTTOM", Clrs)
Dim Path1 As Path
Path1.Initialize(50%x, 100%y)
Path1.LineTo(100%x, 50%y)
Path1.LineTo(50%x, 0%y)
Path1.LineTo(0%x, 50%y)
Path1.LineTo(50%x, 100%y)
Canvas1.ClipPath(Path1) 'clip the drawing area to the path.
DestRect.Left = 0%y
DestRect.Top = 0%y
DestRect.Right = 100%x
DestRect.Bottom = 100%y
Canvas1.DrawDrawable(Gradient1, DestRect) 'fill the drawing area with the gradient.
Activity.Invalidate&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Path1</name>
                <type>android.graphics.Path</type>
            </parameter>
        </method>
        <method>
            <name>DrawColor</name>
            <comment>Fills the entire canvas with the given color.
Example:&lt;code&gt;
Canvas1.DrawColor(Colors.ARGB(100, 255, 0, 0)) 'fills with semi-transparent red color.
Activity.Invalidate&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Bitmap</name>
            <returntype>anywheresoftware.b4a.objects.drawable.CanvasWrapper.BitmapWrapper</returntype>
            <comment>Returns the bitmap that the canvas draws to.
Example: Saves the drawing to a file&lt;code&gt;
Dim Out As OutputStream
Out = File.OpenOutput(File.DirRootExternal, "Test.png", False)
Canvas1.Bitmap.WriteToStream(out, 100, "PNG")
Out.Close&lt;/code&gt;</comment>
        </property>
        <property>
            <name>AntiAlias</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>b</name>
                <type>boolean</type>
            </parameter>
            <comment>Gets or sets whether antialiasing will be applied.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.drawable.CanvasWrapper.BitmapWrapper</name>
        <shortname>Bitmap</shortname>
        <comment>An object that holds a bitmap image. The bitmap can be loaded from a file or other input stream, or can be set from a different bitmap.
Loading large bitmaps can easily lead to out of memory exceptions. This is true even if the file is compressed and not large as the bitmap is stored uncompressed in memory.
For large images you can call InitializeSample and load a subsample of the image. The whole image will be loaded with a lower resolution.</comment>
        <objectwrapper>android.graphics.Bitmap</objectwrapper>
        <owner>process</owner>
        <method>
            <name>InitializeSample</name>
            <comment>Initializes the bitmap from the given file.
The decoder will subsample the bitmap if MaxWidth or MaxHeight are smaller than the bitmap dimensions.
This can save a lot of memory when loading large images.
Note that the actual dimensions may be larger than the specified values.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>MaxWidth</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>MaxHeight</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>GetPixel</name>
            <comment>Returns the color of the pixel at the specified position.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Rotate</name>
            <comment>Returns a &lt;b&gt;new&lt;/b&gt; rotated bitmap. The bitmap will be rotated clockwise.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.CanvasWrapper.BitmapWrapper</returntype>
            <parameter>
                <name>Degrees</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>Resize</name>
            <comment>Returns a &lt;b&gt;new&lt;/b&gt; bitmap with the given width and height.
Note that the bitmap scale will be the same as the device scale.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.CanvasWrapper.BitmapWrapper</returntype>
            <parameter>
                <name>Width</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>KeepAspectRatio</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the bitmap from the given file.
Note that the image will be downsampled if there is not enough memory available.
Example:&lt;code&gt;
Dim Bitmap1 As Bitmap
Bitmap1.Initialize(File.DirAssets, "X.jpg")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Crop</name>
            <comment>Returns a &lt;b&gt;new&lt;/b&gt; cropped bitmap.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.CanvasWrapper.BitmapWrapper</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Initialize3</name>
            <comment>Initializes the bitmap with a copy of the original image (copying is done if necessary).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Initializes the bitmap from the given stream.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>InputStream</name>
                <type>java.io.InputStream</type>
            </parameter>
        </method>
        <method>
            <name>InitializeMutable</name>
            <comment>Creates a new mutable bitmap with the specified dimensions. You can use a Canvas object to draw on this bitmap.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>InitializeResize</name>
            <comment>Initializes the bitmap and sets its size.
Note that the bitmap scale will be the same as the device scale.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>KeepAspectRatio</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>WriteToStream</name>
            <comment>Writes the bitmap to the output stream.
Quality - Value between 0 (smaller size, lower quality) to 100 (larger size, higher quality), 
which is a hint for the compressor for the required quality.
Format - JPEG or PNG.
 
Example:&lt;code&gt;
Dim Out As OutputStream
Out = File.OpenOutput(File.DirRootExternal, "Test.png", False)
Bitmap1.WriteToStream(out, 100, "PNG")
Out.Close&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>OutputStream</name>
                <type>java.io.OutputStream</type>
            </parameter>
            <parameter>
                <name>Quality</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Format</name>
                <type EnumType="true">android.graphics.Bitmap.CompressFormat</type>
            </parameter>
        </method>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <comment>Returns the bitmap height.</comment>
        </property>
        <property>
            <name>Scale</name>
            <returntype>float</returntype>
            <comment>Returns the bitmap scale.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <comment>Returns the bitmap width.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.drawable.CanvasWrapper.RectWrapper</name>
        <shortname>Rect</shortname>
        <comment>Holds four coordinates which represent a rectangle.</comment>
        <objectwrapper>android.graphics.Rect</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Right</name>
            <returntype>int</returntype>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Bottom</name>
            <returntype>int</returntype>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>h</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the rectangle height.</comment>
        </property>
        <property>
            <name>CenterY</name>
            <returntype>int</returntype>
            <comment>Returns the vertical center.</comment>
        </property>
        <property>
            <name>CenterX</name>
            <returntype>int</returntype>
            <comment>Returns the horizontal center.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>w</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the rectangle width.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.drawable.CanvasWrapper.PathWrapper</name>
        <shortname>Path</shortname>
        <comment>A path is a collection of points that represent a connected path.
The first point is set when it is initialized, and then other points are added with LineTo.</comment>
        <objectwrapper>android.graphics.Path</objectwrapper>
        <owner>process</owner>
        <method>
            <name>LineTo</name>
            <comment>Adds a line from the last point to the specified point.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the path and sets the value of the first point.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.drawable.BitmapDrawable</name>
        <shortname>BitmapDrawable</shortname>
        <comment>A drawable that draws a bitmap. The bitmap is set during initialization.
You can change the way the bitmap appears by changing the Gravity property.
Example:&lt;code&gt;
Dim bd As BitmapDrawable
bd.Initialize(LoadBitmap(File.DirAssets, "SomeImage.png"))
bd.Gravity = Gravity.FILL
Activity.Background = bd&lt;/code&gt;</comment>
        <objectwrapper>android.graphics.drawable.BitmapDrawable</objectwrapper>
        <owner>activity</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <property>
            <name>Bitmap</name>
            <returntype>android.graphics.Bitmap</returntype>
            <comment>Returns the internal Bitmap.</comment>
        </property>
        <property>
            <name>Gravity</name>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the gravity value. This value affects the way the image will be drawn.
Example:&lt;code&gt;
BitmapDrawable1.Gravity = Gravity.FILL&lt;/code&gt;</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.streams.File</name>
        <comment>File is a predefined object that holds methods for working with files.
The &lt;link&gt;Text files tutorial|http://www.basic4ppc.com/forum/basic4android-getting-started-tutorials/6690-text-files.html&lt;/link&gt; covers most of the File methods and concepts.</comment>
        <owner>process</owner>
        <method>
            <name>Delete</name>
            <comment>Deletes the specified file. If the file name is a directory then it must be empty in order to be deleted.
Returns true if the file was successfully deleted.
Files in the assets folder cannot be deleted.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsDirectory</name>
            <comment>Tests whether the specified file is a directory.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Size</name>
            <comment>Returns the size in bytes of the specified file.
This method does not support files in the assets folder.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Combine</name>
            <comment>Returns the full path to the given file.
This methods does not support files in the assets folder.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>MakeDir</name>
            <comment>Creates the given folder (creates all folders as needed).
Example:&lt;code&gt;
File.MakeDir(File.DirInternal, "music/90")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Parent</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ReadMap2</name>
            <comment>Similar to ReadMap. ReadMap2 adds the items to the given Map.
By using ReadMap2 with a populated map you can force the items order as needed.
Example:&lt;code&gt;
Dim m As Map
m.Initialize
m.Put("Item #1", "")
m.Put("Item #2", "")
m = File.ReadMap2(File.DirInternal, "settings.txt", m)&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Map</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
        </method>
        <method>
            <name>ListFiles</name>
            <comment>Returns a read only list with all the files and directories which are stored in the specified path.
 An uninitialized list will be returned if the folder is not accessible.</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>LastModified</name>
            <comment>Returns the last modified date of the specified file.
This method does not support files in the assets folder.
Example:&lt;code&gt;
Dim d As Long
d = File.LastModified(File.DirRootExternal, "1.txt")
Msgbox(DateTime.Date(d), "Last modified")&lt;/code&gt;</comment>
            <returntype>long</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ReadList</name>
            <comment>Reads the entire file and returns a List with all lines (as strings).
Example:&lt;code&gt;
Dim List1 As List
List1 = File.ReadList(File.DirDefaultExternal, "1.txt")
For i = 0 to List1.Size - 1
	Log(List1.Get(i))
Next &lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>WriteMap</name>
            <comment>Creates a new file and writes the given map. Each key value pair is written as a single line.
All values are converted to strings.
See this link for more information about the actual format: &lt;link&gt;Properties format|http://en.wikipedia.org/wiki/.properties&lt;/link&gt;.
You can use File.ReadMap to read this file.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Map</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
        </method>
        <method>
            <name>Copy2</name>
            <comment>Copies all the available data from the input stream into the output stream.
The input stream is automatically closed at the end.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>In</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>Out</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>ReadMap</name>
            <comment>Reads the file and parses each line as a key-value pair (of strings).
See this link for more information about the actual format: &lt;link&gt;Properties format|http://en.wikipedia.org/wiki/.properties&lt;/link&gt;.
You can use File.WriteMap to write a map to a file.
Note that the order of items in the map may not be the same as the order in the file.</comment>
            <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>OpenOutput</name>
            <comment>Opens (or creates) the specified file which is located in the Dir folder for writing.
If Append is true then the new data will be written at the end of the existing file.</comment>
            <returntype>anywheresoftware.b4a.objects.streams.File.OutputStreamWrapper</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Append</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>OpenInput</name>
            <comment>Opens the specified file name which is located in the Dir folder for reading.
Note that the Android file system is case sensitive.</comment>
            <returntype>anywheresoftware.b4a.objects.streams.File.InputStreamWrapper</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>WriteList</name>
            <comment>Writes each item in the list as a single line.
Note that a value containing CRLF will be saved as two lines (which will return two item when read with ReadList).
All values will be converted to strings.
Example:&lt;code&gt;
File.WriteList (File.DirInternal, "mylist.txt", List1)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>List</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>WriteString</name>
            <comment>Writes the given text to a new file.
Example:&lt;code&gt;
File.WriteString(File.DirRootExternal, "1.txt", "Some text")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ReadString</name>
            <comment>Reads the file and returns its content as a string.
Example:&lt;code&gt;
Dim text As String
text = File.ReadString(File.DirRootExternal, "1.txt")&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ListFilesAsync</name>
            <comment>Asynchronous version of ListFiles. Should be used with Wait For.
Example:&lt;code&gt;
Wait For (File.ListFilesAsync(Dir)) Complete (Success As Boolean, Files As List)&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Copy2Async</name>
            <comment>Asynchronously copies all the available data from the input stream into the output stream.
The input stream is automatically closed at the end.
Returns an object that should be used as the sender filter.
Example:&lt;code&gt;
Wait For (File.Copy2Async(in, out)) Complete (Success As Boolean)
Log("Success: " &amp; Success)&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>In</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>Out</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>ReadBytes</name>
            <comment>Reads the data from the given file.</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CopyAsync</name>
            <comment>Asynchronously copies the source file to the target path.
Note that it is not possible to copy files to the Assets folder.
Returns an object that should be used as the sender filter.
Example: &lt;code&gt;
Wait For (File.CopyAsync(File.DirAssets, "1.txt", File.DirInternal, "1.txt")) Complete (Success As Boolean)
Log("Success: " &amp; Success)&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>DirSource</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileSource</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DirTarget</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileTarget</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Copy</name>
            <comment>Copies the specified source file to the target file name.
Note that it is not possible to copy files to the Assets folder.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>DirSource</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileSource</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DirTarget</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileTarget</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Exists</name>
            <comment>Returns true if the specified FileName exists in the specified Dir.
Note that the Android file system is case sensitive.

Example:&lt;code&gt;
If File.Exists(File.DirDefaultExternal, "MyFile.txt") Then ...&lt;/code&gt;</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetText</name>
            <comment>Reads the entire file and returns its text.
The file is assumed to be encoded with UTF8.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>WriteBytes</name>
            <comment>Writes the data to the given file.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Data</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <property>
            <name>ExternalReadable</name>
            <returntype>boolean</returntype>
            <comment>Tests whether the external storage media can be read from.</comment>
        </property>
        <property>
            <name>ExternalWritable</name>
            <returntype>boolean</returntype>
            <comment>Tests whether the external storage media can be written to (and also read from).</comment>
        </property>
        <property>
            <name>DirAssets</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns a reference to the files added to the Files tab. These files are read-only.</comment>
        </property>
        <property>
            <name>DirInternalCache</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the folder in the device internal storage that is used to save application cache data.
This data will be deleted automatically when the device runs low on storage.</comment>
        </property>
        <property>
            <name>DirInternal</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the folder in the device internal storage that is used to save application private data.</comment>
        </property>
        <property>
            <name>DirDefaultExternal</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the application default external folder which is based on the package name.
The folder is created if needed.
&lt;b&gt;You should use RuntimePermissions.GetSafeDirDefaultExternal instead.&lt;/b&gt;</comment>
        </property>
        <property>
            <name>DirRootExternal</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the root folder of the external storage media.
This folder requires the WRITE_EXTERNAL_STORAGE permission. Only use it if you really need to access this folder.
&lt;b&gt;You should probably use File.DirInternal or RuntimePermissions.GetSafeDirDefaultExternal instead.&lt;/b&gt;</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.streams.File.InputStreamWrapper</name>
        <shortname>InputStream</shortname>
        <comment>A stream that you can read from. Usually you will pass the stream to a "higher level" object like TextReader that will handle the reading.
You can use File.OpenInput to get a file input stream.</comment>
        <objectwrapper>java.io.InputStream</objectwrapper>
        <owner>process</owner>
        <method>
            <name>BytesAvailable</name>
            <comment>Returns an estimation of the number of bytes available without blocking.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>Close</name>
            <comment>Closes the stream.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ReadBytes</name>
            <comment>Reads up to MaxCount bytes from the stream and writes it to the given Buffer.
The first byte will be written at StartOffset.
Returns the number of bytes actually read.
Returns -1 if there are no more bytes to read.
Otherwise returns at least one byte.
Example:&lt;code&gt;
Dim buffer(1024) As byte
count = InputStream1.ReadBytes(buffer, 0, buffer.length)&lt;/code&gt;</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Buffer</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>MaxCount</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>InitializeFromBytesArray</name>
            <comment>Use File.OpenInput to get a file input stream.
This method should be used to read data from a bytes array.
Initializes the input stream and sets it to read from the specified bytes array.
StartOffset - The first byte that will be read.
MaxCount - Maximum number of bytes to read.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Buffer</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>MaxCount</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.streams.File.OutputStreamWrapper</name>
        <shortname>OutputStream</shortname>
        <comment>A stream that you can write to. Usually you will pass the stream to a "higher level" object like TextWriter which will handle the writing.
Use File.OpenOutput to get a file output stream.</comment>
        <objectwrapper>java.io.OutputStream</objectwrapper>
        <owner>process</owner>
        <method>
            <name>InitializeToBytesArray</name>
            <comment>Use File.OpenOutput to get a file output stream.
This method should be used to write data to a bytes array.
StartSize - The starting size of the internal bytes array. The size will increase if needed.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>StartSize</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ToBytesArray</name>
            <comment>Returns a copy of the internal bytes array. Can only be used when the output stream was initialized with InitializeToBytesArray.</comment>
            <returntype>byte[]</returntype>
        </method>
        <method>
            <name>Flush</name>
            <comment>Flushes any buffered data.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Close</name>
            <comment>Closes the stream.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>WriteBytes</name>
            <comment>Writes the buffer to the stream. The first byte to be written is Buffer(StartOffset), 
and the last is Buffer(StartOffset + Length - 1).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Buffer</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.streams.File.TextWriterWrapper</name>
        <shortname>TextWriter</shortname>
        <comment>Writes text to the underlying stream.&lt;br/&gt;

Example:&lt;code&gt;
Dim Writer As TextWriter
Writer.Initialize(File.OpenOutput(File.DirDefaultExternal, "1.txt", False))
Writer.WriteLine("This is the first line.")
Writer.WriteLine("This is the second line.")
Writer.Close&lt;/code&gt;</comment>
        <objectwrapper>java.io.BufferedWriter</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Write</name>
            <comment>Writes the given Text to the stream.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>WriteList</name>
            <comment>Writes each item in the list as a single line.
Note that a value containing CRLF will be saved as two lines (which will return two item when read with ReadList).
All values will be converted to strings.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>List</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>WriteLine</name>
            <comment>Writes the given Text to the stream followed by a new line character.
 Example:&lt;code&gt;
 	Dim Writer As TextWriter
	Writer.Initialize(File.OpenOutput(File.DirDefaultExternal, "1.txt", False))
	Writer.WriteLine("This is the first line.")
	Writer.WriteLine("This is the second line.")
	Writer.Close &lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Flush</name>
            <comment>Flushes any buffered data.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes this object by wrapping the given OutputStream using the UTF8 encoding.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>OutputStream</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Initializes this object by wrapping the given OutputStream using the specified encoding.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>OutputStream</name>
                <type>java.io.OutputStream</type>
            </parameter>
            <parameter>
                <name>Encoding</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Close</name>
            <comment>Closes the stream.</comment>
            <returntype>void</returntype>
        </method>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.streams.File.TextReaderWrapper</name>
        <shortname>TextReader</shortname>
        <comment>Reads text from the underlying stream. In most cases you should avoid using TextReader and instead read the text with File.ReadString or File.ReadList.</comment>
        <objectwrapper>java.io.BufferedReader</objectwrapper>
        <owner>process</owner>
        <method>
            <name>ReadLine</name>
            <comment>Reads the next line from the stream. The new line characters are not returned.
Returns Null if there are no more characters to read.

Example:&lt;code&gt;
	Dim Reader As TextReader
	Reader.Initialize(File.OpenInput(File.DirInternal, "1.txt"))
	Dim line As String
 	line = Reader.ReadLine
 	Do While line &lt;&gt; Null
		Log(line)
		line = Reader.ReadLine
	Loop
	Reader.Close&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes this object by wrapping the given InputStream using the UTF8 encoding.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>InputStream</name>
                <type>java.io.InputStream</type>
            </parameter>
        </method>
        <method>
            <name>Read</name>
            <comment>Reads characters from the stream and into the Buffer.
Reads up to Length characters and puts them in the Buffer starting as StartOffset.
Returns the actual number of characters read from the stream.
Returns -1 if there are no more characters available.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Buffer</name>
                <type>char[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Ready</name>
            <comment>Tests whether there is at least one character ready for reading without blocking.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Initializes this object by wrapping the given InputStream using the specified encoding.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>InputStream</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>Encoding</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ReadList</name>
            <comment>Reads the remaining text and returns a List object filled with the lines.
Closes the stream when done.</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
        </method>
        <method>
            <name>ReadAll</name>
            <comment>Reads all of the remaining text and closes the stream.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>Skip</name>
            <comment>Skips the specified number of characters.
Returns the actual number of characters that were skipped (which may be less than the specified value).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>NumberOfCharaceters</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Close</name>
            <comment>Closes the stream.</comment>
            <returntype>void</returntype>
        </method>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.WebViewWrapper</name>
        <shortname>WebView</shortname>
        <comment>The WebView view uses the internal WebKit engine to display Html pages.
The page displayed can be an online page loaded with LoadUrl or a Html string loaded with LoadHtml.
The PageFinished event is raised after the page loads.
OverrideUrl is called before loading any Url. If this method returns True then the Url will not be loaded.
You can use this event as a way to handle click events in your code.
UserAndPasswordRequired event is raised when accessing a site that requires basic authentication.
You should return an array of strings with the username as the first element and password as the second element.
For example:&lt;code&gt;Return Array As String("someuser", "password123")&lt;/code&gt;
Returning Null will cancel the request.
Sending incorrect credentials will cause this event to be raised again.</comment>
        <objectwrapper>android.webkit.WebView</objectwrapper>
        <owner>activity</owner>
        <event>PageFinished (Url As String)</event>
        <event>OverrideUrl (Url As String) As Boolean</event>
        <event>UserAndPasswordRequired (Host As String, Realm As String) As String()</event>
        <permission>android.permission.INTERNET</permission>
        <method>
            <name>LoadUrl</name>
            <comment>Loads the given Url.
Example:&lt;code&gt;
WebView1.LoadUrl("http://www.google.com")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>LoadHtml</name>
            <comment>Loads the given Html.
Example:&lt;code&gt;
WebView1.LoadHtml("&lt;html&gt;&lt;body&gt;Hello world!&lt;/body&gt;&lt;/html&gt;")&lt;/code&gt;
You can use "file:///android_asset" to access files added with the file manager:
&lt;code&gt;WebView1.LoadHtml("&lt;html&gt;&lt;body&gt;&lt;img src='file:///android_asset/someimage.jpg'/&gt;&lt;/body&gt;&lt;/html&gt;")&lt;/code&gt;
Note that files added with the file manager should be accessed with a lower cased name.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Html</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>Back</name>
            <comment>Goes back to the previous Url.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Zoom</name>
            <comment>Zooms in or out according to the value of In.
Returns true if zoom has changed.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>In</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>CaptureBitmap</name>
            <comment>Returns the complete html page as a bitmap.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.CanvasWrapper.BitmapWrapper</returntype>
        </method>
        <method>
            <name>StopLoading</name>
            <comment>Stops the current load.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Forward</name>
            <comment>Goes forward to the next Url.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>JavaScriptEnabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <comment>Gets or sets whether JavaScript is enabled.
JavaScript is enabled by default.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Url</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the current Url.</comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>ZoomEnabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>v</name>
                <type>boolean</type>
            </parameter>
            <comment>Gets or sets whether the internal zoom feature is enabled.
The zoom feature is enabled by default.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.Timer</name>
        <shortname>Timer</shortname>
        <comment>A Timer object generates ticks events at specified intervals.
Using a timer is a good alternative to a long loop, as it allows the UI thread to handle other events and messages.
Note that the timer events will not fire while the UI thread is busy running other code.
The timer Enabled property is set to False by default. To make it start working you should change it to True.
Timer events will not fire when the activity is paused, or if a blocking dialog (like Msgbox) is visible.
&lt;b&gt;Timers should be declared in Sub Process_Globals&lt;/b&gt;. Otherwise you may get multiple timers running when the activity is recreated.
It is also important to disable the timer when the activity is pausing and then enable it when it resumes. This will save CPU and battery.</comment>
        <owner CheckForReinitialize="true">process</owner>
        <event>Tick</event>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the timer with the event sub prefix and the specified interval (measured in milliseconds).
IMPORTANT: this object should be declared in Sub Process_Globals.
Example:&lt;code&gt;
Timer1.Initialize("Timer1", 1000)
Timer1.Enabled = True

Sub Timer1_Tick
 'Handle tick events
End Sub
&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Interval</name>
                <type>long</type>
            </parameter>
        </method>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment>Gets or sets whether the timer is enabled (ticking).</comment>
        </property>
        <property>
            <name>Interval</name>
            <returntype>long</returntype>
            <parameter>
                <name>Interval</name>
                <type>long</type>
            </parameter>
            <comment>Gets or sets the interval between tick events, measured in milliseconds.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.TabHostWrapper</name>
        <shortname>TabHost</shortname>
        <comment>TabHost is a view that contains multiple tab pages. Each tab page contains other child views.
See the &lt;link&gt;TabHost tutorial|http://www.basic4ppc.com/forum/basic4android-getting-started-tutorials/6721-tabhost-tutorial.html&lt;/link&gt; for more information.</comment>
        <objectwrapper>android.widget.TabHost</objectwrapper>
        <owner>activity</owner>
        <event>TabChanged</event>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name RaisesSynchronousEvents="true">AddTab</name>
            <comment>Adds a tab page.
Title - The page title.
LayoutFile - A layout file describing the page layout.
Example:&lt;code&gt;
TabHost1.AddTab("Page 1", "page1.bal")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>LayoutFile</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>AddTabWithIcon2</name>
            <comment>Adds a tab page. The tab title includes an icon.
Title - The page title.
DefaultBitmap - The icon that will be drawn when the page is not selected.
SelectedBitmap - The icon that will be drawn when the page is selected.
View - The page content. Usually the view should be a panel containing other views.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Title</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DefaultBitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>SelectedBitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>View</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>AddTab2</name>
            <comment>Adds a tab page.
Title - The page title.
View - The page content. Usually the view should be a panel containing other views.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Title</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>View</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name RaisesSynchronousEvents="true">AddTabWithIcon</name>
            <comment>Adds a tab page. The tab title includes an icon.
Title - The page title.
DefaultBitmap - The icon that will be drawn when the page is not selected.
SelectedBitmap - The icon that will be drawn when the page is selected.
LayoutFile - A layout file describing the page layout.
Example:&lt;code&gt;
Dim bmp1, bmp2 As Bitmap
bmp1 = LoadBitmap(File.DirAssets, "ic.png")
bmp2 = LoadBitmap(File.DirAssets, "ic_selected.png")
TabHost1.AddTabWithIcon("Page 1", bmp1, bmp2,"tabpage1.bal")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>DefaultBitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>SelectedBitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>LayoutFile</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>TabCount</name>
            <returntype>int</returntype>
            <comment>Returns the number of tab pages.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name RaisesSynchronousEvents="true">CurrentTab</name>
            <returntype>int</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the current tab.
Example:&lt;code&gt;
TabHost1.CurrentTab = (TabHost1.CurrentTab + 1) Mod TabHost1.TabCount 'switch to the next tab.
&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.String2</name>
        <comment>Strings are immutable in Basic4android, which means that you can change the value of a string variable but you cannot change the text stored in a string object.
So methods like SubString, Trim and ToLowerCase return a new string, &lt;b&gt;they do not change the value of the current string&lt;/b&gt;.
Typical usage:&lt;code&gt;
Dim s As String
s = "some text"
s = s.Replace("a", "b")&lt;/code&gt;
You can use StringBuilder if you need a mutable string.
Note that string literals are also string objects:&lt;code&gt;
Log(" some text ".Trim)&lt;/code&gt;</comment>
        <owner>process</owner>
        <method>
            <name DesignerName="EqualsIgnoreCase">equalsIgnoreCase</name>
            <comment>Returns true if both strings are equal ignoring their case.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>other</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="GetBytes">getBytes</name>
            <comment>Encodes the string into a new array of bytes.
 Example:&lt;code&gt;
 Dim Data() As Byte
 Data = "Some string".GetBytes("UTF8")&lt;/code&gt;</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Charset</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Replace">replace</name>
            <comment>Returns a new string resulting from the replacement of all the occurrences of Target with Replacement.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Target</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Replacement</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="IndexOf">indexOf</name>
            <comment>Returns the index of the first occurrence of SearchFor string in the string.
Returns -1 if SearchFor was not found.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>SearchFor</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Trim">trim</name>
            <comment>Returns a copy of the original string without any leading or trailing white spaces.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name DesignerName="IndexOf2">indexOf</name>
            <comment>Returns the index of the first occurrence of SearchFor string in the string.
Starts searching from the given Index.
Returns -1 if SearchFor was not found.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>SearchFor</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SubString">substring</name>
            <comment>Returns a new string which is a substring of the original string.
The new string will include the character at BeginIndex and will extend to the end of the string.

Example:
&lt;code&gt;"012345".SubString(2) 'returns "2345"&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>BeginIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LastIndexOf2">lastIndexOf</name>
            <comment>Returns the index of the first occurrence of SearchFor string in the string.
The search starts at the given index and advances to the beginning.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>SearchFor</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="StartsWith">startsWith</name>
            <comment>Returns true if this string starts with the given Prefix.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Prefix</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="ToLowerCase">toLowerCase</name>
            <comment>Returns a new string which is the result of lower casing this string.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name DesignerName="ToUpperCase">toUpperCase</name>
            <comment>Returns a new string which is the result of upper casing this string.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name DesignerName="Length">length</name>
            <comment>Returns the length of this string.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name DesignerName="CharAt">charAt</name>
            <comment>Returns the character at the given index.</comment>
            <returntype>char</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="LastIndexOf">lastIndexOf</name>
            <comment>Returns the index of the first occurrence of SearchFor string in the string.
The search starts at the end of the string and advances to the beginning.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>SearchFor</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="Contains">contains</name>
            <comment>Tests whether the string contains the given string parameter.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>SearchFor</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SubString2">substring</name>
            <comment>Returns a new string which is a substring of the original string.
The new string will include the character at BeginIndex and will extend to the character at EndIndex, not including the last character.

Example:
&lt;code&gt;"012345".SubString2(2, 4) 'returns "23"&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>BeginIndex</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>EndIndex</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CompareTo">compareTo</name>
            <comment>Lexicographically compares the two strings.
Returns a value less than 0 if the current string precedes Other.
Returns 0 if both strings are equal.
Returns a value larger than 0 if the current string comes after Other.
Note that upper case characters precede lower case characters.

Examples:&lt;code&gt;
"abc".CompareTo("da") ' &lt; 0 
"abc".CompareTo("Abc") ' &gt; 0
"abc".CompareTo("abca")' &lt; 0 &lt;/code&gt;</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Other</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="EndsWith">endsWith</name>
            <comment>Returns true if this string ends with the given Suffix.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Suffix</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.SpinnerWrapper</name>
        <shortname>Spinner</shortname>
        <comment>A folded list that opens when the user clicks on it and allows the user to choose an item. Similar to WinForms ComboBox.
The ItemClick event is raised each time a user presses on an item (even if it is the already selected item).</comment>
        <objectwrapper>anywheresoftware.b4a.objects.SpinnerWrapper.B4ASpinner</objectwrapper>
        <owner>activity</owner>
        <event>ItemClick (Position As Int, Value As Object)</event>
        <method>
            <name>Add</name>
            <comment>Adds an item.
Example:&lt;code&gt;
Spinner1.Add("Sunday")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Item</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Clear</name>
            <comment>Clears all items.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetItem</name>
            <comment>Returns the item at the specified index.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IndexOf</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>AddAll</name>
            <comment>Adds multiple items.
Example:&lt;code&gt;
Spinner1.AddAll(Array As String("Sunday", "Monday", ...))&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>List</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>RemoveAt</name>
            <comment>Removes the item at the specified index.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>SelectedIndex</name>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the index of the selected item. Returns -1 if no item is selected.</comment>
        </property>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Size</name>
            <returntype>int</returntype>
            <comment>Returns the number of items.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>TextSize</name>
            <returntype>float</returntype>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
            <comment>Gets or sets the text size. The size should be set before adding items.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DropdownBackgroundColor</name>
            <returntype>int</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the dropdown items background color. The color should be set before adding items.
Setting the color to transparent will make the spinner use the default background color.</comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Prompt</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <comment>Gets or sets the title that will be displayed when the spinner is opened.</comment>
        </property>
        <property>
            <name>DropdownTextColor</name>
            <returntype>int</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the dropdown text color. The color should be set before adding items.
Setting the color to transparent will make the spinner use the default text color.</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>int</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the text color. The color should be set before adding items.
Setting the color to transparent will make the spinner use the default text color.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>SelectedItem</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the value of the selected item.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.SimpleListAdapter.SingleLineLayout</name>
        <owner>process</owner>
        <property>
            <name>ItemHeight</name>
            <returntype>int</returntype>
            <parameter>
                <name>Height</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the height of items with this layout.</comment>
        </property>
        <field>
            <name>Background</name>
            <comment>The background of items with this layout.</comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
        </field>
        <field>
            <name>Label</name>
            <comment>The label that is used for the the first line (and only line in case of SingleLineLayout).</comment>
            <returntype>anywheresoftware.b4a.objects.LabelWrapper</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.SimpleListAdapter.TwoLinesLayout</name>
        <owner>process</owner>
        <property>
            <name>ItemHeight</name>
            <returntype>int</returntype>
            <parameter>
                <name>Height</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the height of items with this layout.</comment>
        </property>
        <field>
            <name>Background</name>
            <comment>The background of items with this layout.</comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
        </field>
        <field>
            <name>SecondLabel</name>
            <comment>The label that is used for the second line.</comment>
            <returntype>anywheresoftware.b4a.objects.LabelWrapper</returntype>
        </field>
        <field>
            <name>Label</name>
            <comment>The label that is used for the the first line (and only line in case of SingleLineLayout).</comment>
            <returntype>anywheresoftware.b4a.objects.LabelWrapper</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.SimpleListAdapter.TwoLinesAndBitmapLayout</name>
        <owner>process</owner>
        <property>
            <name>ItemHeight</name>
            <returntype>int</returntype>
            <parameter>
                <name>Height</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the height of items with this layout.</comment>
        </property>
        <field>
            <name>Background</name>
            <comment>The background of items with this layout.</comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
        </field>
        <field>
            <name>SecondLabel</name>
            <comment>The label that is used for the second line.</comment>
            <returntype>anywheresoftware.b4a.objects.LabelWrapper</returntype>
        </field>
        <field>
            <name>Label</name>
            <comment>The label that is used for the the first line (and only line in case of SingleLineLayout).</comment>
            <returntype>anywheresoftware.b4a.objects.LabelWrapper</returntype>
        </field>
        <field>
            <name>ImageView</name>
            <comment>The ImageView that holds the bitmap.</comment>
            <returntype>anywheresoftware.b4a.objects.ImageViewWrapper</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.ServiceHelper</name>
        <comment>Each Service module includes a Service object.
This object is used to bring the service in and out of the foreground state.
See the Services tutorial for more information.</comment>
        <owner>activity</owner>
        <method>
            <name>StopForeground</name>
            <comment>Takes the current service out of the foreground state and cancels the notification with the given Id.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>StartForeground</name>
            <comment>Brings the current service to the foreground state and displays the given notification.
Id - The notification Id (see the notification object documentation).
Notification - The notification that will be displayed.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Notification</name>
                <type>android.app.Notification</type>
            </parameter>
        </method>
        <method>
            <name>StopAutomaticForeground</name>
            <comment>Stops the automatic foreground state. Does nothing if the service was not in that state.
You can call this method at the end of the background task as an alternative to calling StopService(Me).</comment>
            <returntype>void</returntype>
        </method>
        <field>
            <name>AutomaticForegroundMode</name>
            <comment>Sets the automatic foreground mode. It should be one of the AUTOMATIC_FOREGROUND constants.
Default value is AUTOMATIC_FOREGROUND_WHEN_NEEDED.
Should be set in Service_Create.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>AutomaticForegroundNotification</name>
            <comment>The notification that will show when entering automatic foreground state.
A default notification will show if not set.</comment>
            <returntype>android.app.Notification</returntype>
        </field>
        <field>
            <name>AUTOMATIC_FOREGROUND_WHEN_NEEDED</name>
            <comment>Automatic foreground mode will be set when needed. This will only happen on Android 8+ devices when the service is started while the app is in the background.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>AUTOMATIC_FOREGROUND_NEVER</name>
            <comment>Never enter automatic foreground mode. This means that you must handle it yourself to avoid the app from crashing.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>AUTOMATIC_FOREGROUND_ALWAYS</name>
            <comment>Always enter foreground mode when the service is started. This is useful when you want to make sure that the OS doesn't kill the process until the task completes.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.SeekBarWrapper</name>
        <shortname>SeekBar</shortname>
        <comment>A view that allows the user to set a value by dragging a slider. Similar to WinForms TrackBar.
The ValueChanged event is raised whenever the value is changed. The UserChanged parameter can be used to distinguish between changes done by the user and changes done programmatically.</comment>
        <objectwrapper>android.widget.SeekBar</objectwrapper>
        <owner>activity</owner>
        <event>ValueChanged (Value As Int, UserChanged As Boolean)</event>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Max</name>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the maximum allowed value.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>Value</name>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the current value.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.ScrollViewWrapper</name>
        <shortname>ScrollView</shortname>
        <comment>ScrollView is a view that contains other views and allows the user to vertically scroll those views.
See the &lt;link&gt;ScrollView tutorial|http://www.basic4ppc.com/forum/basic4android-getting-started-tutorials/6612-scrollview-example.html&lt;/link&gt; for more information.
The ScrollView has an inner panel which actually contains the child views.
You can add views by calling: &lt;code&gt;ScrollView1.Panel.AddView(...)&lt;/code&gt;
Note that it is not possible to nest scrolling views. For example a multiline EditText cannot be located inside a ScrollView.</comment>
        <objectwrapper>android.widget.ScrollView</objectwrapper>
        <owner>activity</owner>
        <event>ScrollChanged(Position As Int)</event>
        <method>
            <name>ScrollToNow</name>
            <comment>Immediately scrolls the ScrollView (with no animations).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Scroll</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the ScrollView and sets its inner panel height to the given height.
You can later change this height by calling ScrollView.Panel.Height.
&lt;code&gt;
Dim ScrollView1 As ScrollView
ScrollView1.Initialize(1000dip)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>FullScroll</name>
            <comment>Scrolls the scroll view to the top or bottom.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Bottom</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Similar to Initialize. Sets the Sub that will handle the ScrollChanged event.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Panel</name>
            <returntype>anywheresoftware.b4a.objects.PanelWrapper</returntype>
            <comment>Returns the panel which you can use to add views to.
Example:&lt;code&gt;
ScrollView1.Panel.AddView(...)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>ScrollPosition</name>
            <returntype>int</returntype>
            <parameter>
                <name>Scroll</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the scroll position.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.RemoteViewsWrapper</name>
        <shortname>RemoteViews</shortname>
        <comment>RemoteViews allows indirect access to a home screen widget.
See this tutorial for more information &lt;link&gt;Widgets tutorial|http://www.basic4ppc.com/forum/basic4android-getting-started-tutorials/10166-android-home-screen-widgets-tutorial-part-i.html&lt;/link&gt;.</comment>
        <owner>process</owner>
        <event>RequestUpdate</event>
        <event>Disabled</event>
        <method>
            <name>HandleWidgetEvents</name>
            <comment>Checks if the intent starting this service was sent from the widget and raises events based on the intent.
Returns True if an event was raised.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>StartingIntent</name>
                <type>android.content.Intent</type>
            </parameter>
        </method>
        <method>
            <name>SetVisible</name>
            <comment>Sets the visibility of the given view.
Example:&lt;code&gt;rv.SetVisibile("Button1", False)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>ViewName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>SetTextColor</name>
            <comment>Sets the text color of the given button or label.
Example:&lt;code&gt;rv.SetTextColor("Label1", Colors.Red)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>ViewName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetText</name>
            <comment>Sets the text of the given view.
Example:&lt;code&gt;rv.SetText("Label1", "New text")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>ViewName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>SetImage</name>
            <comment>Sets the image of the given ImageView.
Example:&lt;code&gt;rv.SetImage("ImageView1", LoadBitmap(File.DirAssets, "1.jpg"))&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>ImageViewName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Image</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>SetTextSize</name>
            <comment>Sets the text size of the given button or label.
Example:&lt;code&gt;rv.SetTextSize("Label1", 20)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>ViewName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Size</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>SetProgress</name>
            <comment>Sets the progress value of the given ProgressBar. Value should be between 0 to 100.
Example:&lt;code&gt;rv.SetProgress("ProgressBar1", 50)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>ProgressBarName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Progress</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>UpdateWidget</name>
            <comment>Updates the widget with the changes done. This method is also responsible for configuring the events.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.ProgressBarWrapper</name>
        <shortname>ProgressBar</shortname>
        <comment>A progress bar view. The Progress property sets the progress value which is between 0 to 100.</comment>
        <objectwrapper>android.widget.ProgressBar</objectwrapper>
        <owner>activity</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Progress</name>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the progress value.</comment>
        </property>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Indeterminate</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <comment>Gets or sets whether the progress bar is in indeterminate mode (cyclic animation).</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.PanelWrapper</name>
        <shortname>Panel</shortname>
        <comment>A Panel is a view that holds other child views.
You can add child views programmatically or by loading a layout file.
The Panel raises the Touch event. The first parameter of this event is the Action which is one of the Activity action constants.
Return True from the Touch event sub to consume the event (otherwise other views behind the Panel will receive the event).</comment>
        <objectwrapper>android.view.ViewGroup</objectwrapper>
        <owner>activity</owner>
        <event>Touch (Action As Int, X As Float, Y As Float)</event>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name>GetView</name>
            <comment>Gets the view that is stored in the specified index.</comment>
            <returntype>anywheresoftware.b4a.objects.ConcreteViewWrapper</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>AddView</name>
            <comment>Adds a view to this panel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>View</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetAllViewsRecursive</name>
            <comment>Returns an iterator that iterates over all the child views including views that were added to other child views.
Example:&lt;code&gt;
For Each v As View In Panel1.GetAllViewsRecursive
	...
Next&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.BA.IterableList</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RemoveViewAt</name>
            <comment>Removes the view that is stored in the specified index.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name RaisesSynchronousEvents="true">LoadLayout</name>
            <comment>Loads a layout file to this panel. Returns the value of the chosen layout variant.</comment>
            <returntype>anywheresoftware.b4a.keywords.LayoutValues</returntype>
            <parameter>
                <name>LayoutFile</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>SetElevationAnimated</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Elevation</name>
                <type Pixel="true">float</type>
            </parameter>
        </method>
        <method>
            <name>RemoveAllViews</name>
            <comment>Removes all child views.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>NumberOfViews</name>
            <returntype>int</returntype>
            <comment>Returns the number of child views.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Elevation</name>
            <returntype>float</returntype>
            <parameter>
                <name>e</name>
                <type Pixel="true">float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
        <field>
            <name>ACTION_MOVE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ACTION_DOWN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ACTION_UP</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.NotificationWrapper</name>
        <shortname>Notification</shortname>
        <comment>A status bar notification. The user can open the notifications screen and press on the notification.
Pressing on the notification will start an activity as set by the notification object.
Notifications are usually used by services as services are not expected to directly start activities.
The notification must have an icon and its "info" must be set.
Example:&lt;code&gt;
Dim n As Notification
n.Initialize
n.Icon = "icon"
n.SetInfo("This is the title", "and this is the body.", Main) 'Change Main to "" if this code is in the main module.
n.Notify(1)&lt;/code&gt;</comment>
        <objectwrapper>java.lang.Object</objectwrapper>
        <owner>process</owner>
        <permission>android.permission.VIBRATE</permission>
        <method>
            <name DesignerName="SetInfo2">SetInfo2New</name>
            <comment>Similar to SetInfo. Also sets a string that can be later extracted in Activity_Resume.
Title - The message title.
Body - The message body.
Tag - An arbitrary string that can be later extract when the user clicks on the notification.
Activity - The activity to start when the user presses on the notification.
Pass an empty string to start the current activity (when calling from an activity module).
Example of extracting the tag:&lt;code&gt;
Sub Activity_Resume
	Dim in As Intent
	in = Activity.GetStartingIntent
	If in.HasExtra("Notification_Tag") Then
		Log(in.GetExtra("Notification_Tag")) 'Will log the tag
	End If
End Sub&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Body</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Tag</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Activity</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Notify</name>
            <comment>Displays the notification.
Id - The notification id. This id can be used to later update this notification (by calling Notify again with the same Id),
or to cancel the notification.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Cancel</name>
            <comment>Cancels the notification with the given Id.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the notification. By default the notification plays a sound, shows a light and vibrates the phone.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetInfo">SetInfoNew</name>
            <comment>Sets the message text and action.
Title - The message title.
Body - The message body.
Activity - The activity to start when the user presses on the notification.
Pass an empty string to start the current activity (when calling from an activity module).
Example:&lt;code&gt;
n.SetInfo("Some title", "Some text", Main)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Body</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Activity</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Initializes the notification and sets the notification channel importance level.
Note that the importance level only affect Android 8+ devices.
&lt;code&gt;
Dim no As Notification
no.Initialize2(no.IMPORTANCE_DEFAULT)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ImportanceLevel</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Vibrate</name>
            <parameter>
                <name>v</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the notification will vibrate.
Example:&lt;code&gt;
n.Vibrate = False&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Number</name>
            <returntype>int</returntype>
            <parameter>
                <name>v</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets a number that will be displayed on the icon. This is useful to represent multiple events in a single notification.</comment>
        </property>
        <property>
            <name>Light</name>
            <parameter>
                <name>v</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the notification will show a light.
Example:&lt;code&gt;
n.Light = False&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Insistent</name>
            <parameter>
                <name>v</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the sound will play repeatedly until the user opens the notifications screen.</comment>
        </property>
        <property>
            <name>Sound</name>
            <parameter>
                <name>v</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the notification will play a sound.
Example:&lt;code&gt;
n.Sound = False&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Icon</name>
            <parameter>
                <name>s</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Sets the icon displayed.
The icon value is the name of the image file without the extension. &lt;b&gt;The name is case sensitive.
The image file should be manually copied to the following folder: source folder\Objects\res\drawable.&lt;/b&gt;
You can use "icon" to use the application icon (which is also located in this folder):&lt;code&gt;
n.Icon = "icon"&lt;/code&gt;</comment>
        </property>
        <property>
            <name>AutoCancel</name>
            <parameter>
                <name>v</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the notification will be canceled automatically when the user clicks on it.</comment>
        </property>
        <property>
            <name>OnGoingEvent</name>
            <parameter>
                <name>v</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether this notification is an "ongoing event". The notification will be displayed in the ongoing section
and it will not be cleared.</comment>
        </property>
        <field>
            <name>IMPORTANCE_HIGH</name>
            <comment>Higher notification importance: shows everywhere, makes noise and peeks. May use full screen
 intents.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>IMPORTANCE_LOW</name>
            <comment>Low notification importance: shows everywhere, but is not intrusive.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>IMPORTANCE_DEFAULT</name>
            <comment>Default notification importance: shows everywhere, makes noise, but does not visually intrude.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>IMPORTANCE_MIN</name>
            <comment>Minimum notification importance: only shows in the shade, below the fold.
Cannot be used with foreground services.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.MediaPlayerWrapper</name>
        <shortname>MediaPlayer</shortname>
        <comment>The MediaPlayer can be used to play audio files.
See the &lt;link&gt;media player tutorial|http://www.basic4ppc.com/forum/basic4android-getting-started-tutorials/6591-mediaplayer-tutorial.html&lt;/link&gt; for more information.
NOTE: The media player should be declared as a &lt;b&gt;process&lt;/b&gt; global object.
The Complete event is raised when playback completes. It will only be raised if you initialize the object with Initialize2.</comment>
        <owner>process</owner>
        <event>Complete</event>
        <method>
            <name>Play</name>
            <comment>Starts (or resumes) playing the loaded audio file.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Load</name>
            <comment>Loads an audio file and prepares it for playing.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Pause</name>
            <comment>Pauses playback. You can resume playback from the current position by calling Play.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Similar to Initialize2. Complete event will be raised when play back completes.
 EventName - The Sub that will handle the Complete event.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Stop</name>
            <comment>Stops playing. You must call Load before trying to play again.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVolume</name>
            <comment>Sets the playing volume for each channel. The value should be between 0 to 1.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>IsPlaying</name>
            <comment>Returns true if the media player is currently playing.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the object.
You should use Initialize2 if you want to handle the Complete event.
Example:&lt;code&gt;
Dim MP As MediaPlayer 'should be done in Sub Process_Globals
MP.Initialize2("MP")
MP.Load(File.DirAssets, "SomeFile.mp3")
MP.Play&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Release</name>
            <comment>Releases all resources allocated by the media player.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Position</name>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the current position (in milliseconds).</comment>
        </property>
        <property>
            <name>Looping</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <comment>Gets or sets whether the media player will restart playing automatically.</comment>
        </property>
        <property>
            <name>Duration</name>
            <returntype>int</returntype>
            <comment>Returns the total duration of the loaded file (in milliseconds).</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.ListViewWrapper</name>
        <shortname>ListView</shortname>
        <comment>ListView is a very useful view that can handle large and small lists.
The ListView raises two events. ItemClick is raised when an item is clicked and ItemLongClick is raised when an item is clicked and held.
See the &lt;link&gt;ListView tutorial|http://www.basic4ppc.com/forum/basic4android-getting-started-tutorials/6537-listview-tutorial.html&lt;/link&gt; for more information.</comment>
        <objectwrapper>anywheresoftware.b4a.objects.ListViewWrapper.SimpleListView</objectwrapper>
        <owner>activity</owner>
        <event>ItemClick (Position As Int, Value As Object)</event>
        <event>ItemLongClick (Position As Int, Value As Object)</event>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Clear</name>
            <comment>Clears all items from the list.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetItem</name>
            <comment>Returns the value of the item at the specified position.
Returns the "return value" if it was set and if not returns the text of the first line.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>AddSingleLine2</name>
            <comment>Adds a single line item.
The specified return value will be returned when calling GetItem or in the ItemClick event.
Example:&lt;code&gt;
ListView1.AddSingleLine2("Sunday", 1)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>ReturnValue</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>AddTwoLines</name>
            <comment>Adds a two lines item.
Example:&lt;code&gt;
ListView1.AddTwoLines("This is the first line.", "And this is the second")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Text1</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Text2</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>AddTwoLinesAndBitmap2</name>
            <comment>Adds a two lines and a bitmap item.
The specified return value will be returned when calling GetItem or in the ItemClick event.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Text1</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Text2</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>ReturnValue</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>SetSelection</name>
            <comment>Sets the currently selected item. Calling this method will make this item visible.
If the user is interacting with the list with the keyboard or the wheel button the item will also be visibly selected.
Example:&lt;code&gt;ListView1.SetSelection(10)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>AddTwoLinesAndBitmap</name>
            <comment>Adds a two lines and a bitmap item.
Example:&lt;code&gt;
ListView1.AddTwoLinesAndBitmap("First line", "Second line", LoadBitmap(File.DirAssets, "SomeImage.png"))&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Text1</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Text2</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>AddTwoLines2</name>
            <comment>Adds a two lines item.
The specified return value will be returned when calling GetItem or in the ItemClick event.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Text1</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Text2</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>ReturnValue</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>RemoveAt</name>
            <comment>Removes the item at the specified position.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>AddSingleLine</name>
            <comment>Adds a single line item.
 Example:&lt;code&gt;
 ListView1.AddSingleLine("Sunday")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>ScrollingBackgroundColor</name>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background color that will be used while scrolling the list.
This is an optimization done to make the scrolling smoother.
Set to &lt;code&gt;Colors.Transparent&lt;/code&gt; if the background behind the list is not solid color.
The default is black.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Size</name>
            <returntype>int</returntype>
            <comment>Returns the number of items stored in the list.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>SingleLineLayout</name>
            <returntype>anywheresoftware.b4a.objects.SimpleListAdapter.SingleLineLayout</returntype>
            <comment>Returns the layout that is used to show single line items.
You can change the layout values to change the appearance of such items.
Example:&lt;code&gt;
Dim Label1 As Label
Label1 = ListView1.SingleLineLayout.Label
Label1.TextSize = 20
Label1.TextColor = Colors.Green&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>TwoLinesAndBitmap</name>
            <returntype>anywheresoftware.b4a.objects.SimpleListAdapter.TwoLinesAndBitmapLayout</returntype>
            <comment>Returns the layout that is used to show two lines and bitmap items.
You can change the layout values to change the appearance of such items.
For example if you want to remove the second label (in all items with this layout):&lt;code&gt;
ListView1.TwoLinesAndBitmap.SecondLabel.Visible = False&lt;/code&gt;</comment>
        </property>
        <property>
            <name>FastScrollEnabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment>Gets or sets whether the fast scroll icon will appear when the user scrolls the list.
The default is false.</comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>TwoLinesLayout</name>
            <returntype>anywheresoftware.b4a.objects.SimpleListAdapter.TwoLinesLayout</returntype>
            <comment>Returns the layout that is used to show two lines items.
You can change the layout values to change the appearance of such items.
Example:&lt;code&gt;
Dim Label1 As Label
Label1 = ListView1.TwoLinesLayout.SecondLabel
Label1.TextSize = 20
Label1.TextColor = Colors.Green&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.LabelWrapper</name>
        <shortname>Label</shortname>
        <comment>A Label view that shows read-only text.</comment>
        <objectwrapper>android.widget.TextView</objectwrapper>
        <owner>activity</owner>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetTextSizeAnimated</name>
            <comment>Changes the text size with an animation effect.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SetTextColorAnimated</name>
            <comment>Changes the text color with a transition animation between the current color and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>Typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>TextSize</name>
            <returntype>float</returntype>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
            <comment>Get or sets the view's text size.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Text</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Ellipsize</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>e</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets or sets the truncation mode. Only affects single line fields.
Possible values:
NONE
START - The three dots appear at the beginning.
MIDDLE - The three dots appear at the middle.
END - The three dots appear at the end.</comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>int</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
        <property>
            <name>SingleLine</name>
            <parameter>
                <name>singleLine</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the text field should be in single line mode or multiline mode.</comment>
        </property>
        <property>
            <name>Gravity</name>
            <returntype>int</returntype>
            <parameter>
                <name>Gravity</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.IntentWrapper</name>
        <shortname>Intent</shortname>
        <comment>Intent objects are messages which you can send to the OS in order to do some external action.
The Intent object should be sent with &lt;code&gt;StartActivity&lt;/code&gt; keyword.
See this &lt;link&gt;page|https://developer.android.com/reference/android/content/Intent.html&lt;/link&gt; for a list of standard constants.
Example, launch YouTube application:&lt;code&gt;
Dim Intent1 As Intent
Intent1.Initialize(Intent1.ACTION_MAIN, "")
Intent1.SetComponent("com.google.android.youtube/.HomeActivity")
StartActivity(Intent1)&lt;/code&gt;</comment>
        <objectwrapper>android.content.Intent</objectwrapper>
        <owner>process</owner>
        <method>
            <name>SetComponent</name>
            <comment>Explicitly sets the component that will handle this intent.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Component</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ExtrasToString</name>
            <comment>Returns a string containing the extra items. This is useful for debugging.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>AddCategory</name>
            <comment>Adds a category describing the intent required operation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Category</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetExtra</name>
            <comment>Returns the item value with the given key.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>HasExtra</name>
            <comment>Tests whether an item with the given key exists.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>WrapAsIntentChooser</name>
            <comment>Wraps the intent in another "chooser" intent. A dialog will be displayed to the user with the available services that can act on the intent.
&lt;code&gt;WrapAsIntentChooser&lt;/code&gt; should be the last method called before sending the intent.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Title</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>PutExtra</name>
            <comment>Adds extra data to the intent.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Value</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the object using the given Action and data Uri. Action can be one of the action constants or any other string.
Pass an empty string if a Uri is not required.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Action</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Uri</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetPackage</name>
            <comment>Explicitly sets the package name of the target application.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>PackageName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Initializes the object by parsing the Uri.
Flags - Additional integer value. Pass 0 if it is not required.
Example:&lt;code&gt;
Dim Intent1 As Intent
Intent1.Initialize2("http://www.basic4ppc.com", 0)
StartActivity(Intent1)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Uri</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Flags</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetType</name>
            <comment>Sets the MIME type.
Example:&lt;code&gt;
Intent1.SetType("text/plain")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Type</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetData</name>
            <comment>Retrieves the data component as a string.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <property>
            <name>Action</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>v</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets or sets the Intent action.</comment>
        </property>
        <property>
            <name>Flags</name>
            <returntype>int</returntype>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the flags component.</comment>
        </property>
        <field>
            <name>ACTION_PICK</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>ACTION_APPWIDGET_UPDATE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>ACTION_VIEW</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>ACTION_CALL</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>ACTION_EDIT</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>ACTION_SEND</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>ACTION_MAIN</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.ImageViewWrapper</name>
        <shortname>ImageView</shortname>
        <comment>A view that shows an image.
You can assign a bitmap using the Bitmap property.
The Gravity property changes the way the image appears.
The two most relevant values are Gravity.FILL (which will cause the image to fill the entire view) 
and Gravity.CENTER (which will draw the image in the view's center).</comment>
        <objectwrapper>android.widget.ImageView</objectwrapper>
        <owner>activity</owner>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is not changed.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Bitmap</name>
            <returntype>android.graphics.Bitmap</returntype>
            <parameter>
                <name>value</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <comment>Gets or sets the bitmap assigned to the ImageView.
Example:&lt;code&gt;
ImageView1.Bitmap = LoadBitmap(File.DirAssets, "someimage.jpg")&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
        <property>
            <name>Gravity</name>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the gravity assigned to the bitmap.
Example:&lt;code&gt;
ImageView1.Gravity = Gravity.Fill&lt;/code&gt;</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.HorizontalScrollViewWrapper</name>
        <shortname>HorizontalScrollView</shortname>
        <comment>HorizontalScrollView is a view that contains other views and allows the user to horizontally scroll those views.
The HorizontalScrollView is similar to ScrollView which scrolls vertically.
See the &lt;link&gt;ScrollView tutorial|http://www.basic4ppc.com/forum/basic4android-getting-started-tutorials/6612-scrollview-example.html&lt;/link&gt; for more information.
The HorizontalScrollView has an inner panel which actually contains the child views.
You can add views by calling: &lt;code&gt;HorizontalScrollView1.Panel.AddView(...)&lt;/code&gt;
Note that it is not possible to nest scrolling views.</comment>
        <objectwrapper>android.widget.HorizontalScrollView</objectwrapper>
        <owner>activity</owner>
        <event>ScrollChanged(Position As Int)</event>
        <method>
            <name>ScrollToNow</name>
            <comment>Immediately scrolls the HorizontalScrollView (with no animations).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Scroll</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the object.
Width - The width of the inner panel.
EventName - Sets the sub that will handle the event.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>FullScroll</name>
            <comment>Scrolls the view to the right or left.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Right</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Panel</name>
            <returntype>anywheresoftware.b4a.objects.PanelWrapper</returntype>
            <comment>Returns the panel which you can use to add views to.
Example:&lt;code&gt;
HorizontalScrollView1.Panel.AddView(...)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>ScrollPosition</name>
            <returntype>int</returntype>
            <parameter>
                <name>Scroll</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the scroll position.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.EditTextWrapper</name>
        <shortname>EditText</shortname>
        <comment>EditText view is a view that allows the user to write free text (similar to WinForms TextBox).
The EditText has two modes; SingleLine and MultiLine. You can set it to be multiline by calling &lt;code&gt;EditText1.SingleLine = False&lt;/code&gt;
On most devices the soft keyboard will show automatically when the user presses on the EditText.
You can change the InputType property and change the type of keyboard that appears.
For example: &lt;code&gt;EditText1.InputType = EditText1.INPUT_TYPE_NUMBERS&lt;/code&gt; will cause the numeric keyboard to appear when
the user presses on the EditText. Note that it will also cause the EditText to only accept numbers.

The TextChanged event fires whenever the text changes and it includes the old and new strings.
The EnterPressed event fires when the user presses on the enter key or action key (Done or Next).
The FocusChanged event fires when the view is focused or loses focus. HasFocus parameter value will be set accordingly.
Note that most views are not focusable. For example, pressing on a Button will not change the focus state of an EditText.</comment>
        <objectwrapper>android.widget.EditText</objectwrapper>
        <owner>activity</owner>
        <event>TextChanged (Old As String, New As String)</event>
        <event>EnterPressed</event>
        <event>FocusChanged (HasFocus As Boolean)</event>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SelectAll</name>
            <comment>Selects the entire text.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetTextSizeAnimated</name>
            <comment>Changes the text size with an animation effect.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SetTextColorAnimated</name>
            <comment>Changes the text color with a transition animation between the current color and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>SetSelection</name>
            <comment>Sets the selected text.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Wrap</name>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the text content will wrap within the EditText bounds. Relevant when the EditText is in multiline mode.
Example:&lt;code&gt;
EditText1.Wrap = False&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>ForceDoneButton</name>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <comment>By default the OS sets the virtual keyboard action key to display Done or Next according to the specific layout.
You can force it to display Done by setting this value to True.
Example:&lt;code&gt;
EditText1.ForceDoneButton = True&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Hint</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets or sets the text that will appear when the EditText is empty.
Example:&lt;code&gt;
EditText1.Hint = "Enter username"&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>SelectionStart</name>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the selection start position (or the cursor position).
Returns -1 if there is no selection or cursor.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>int</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
        <property>
            <name>Gravity</name>
            <returntype>int</returntype>
            <parameter>
                <name>Gravity</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>HintColor</name>
            <returntype>int</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the hint text color.
Example:&lt;code&gt;
EditText1.HintColor = Colors.Gray&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>Typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>TextSize</name>
            <returntype>float</returntype>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
            <comment>Get or sets the view's text size.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PasswordMode</name>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the EditText should be in password mode and hide the actual characters.</comment>
        </property>
        <property>
            <name RaisesSynchronousEvents="true">Text</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Ellipsize</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>e</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets or sets the truncation mode. Only affects single line fields.
Possible values:
NONE
START - The three dots appear at the beginning.
MIDDLE - The three dots appear at the middle.
END - The three dots appear at the end.</comment>
        </property>
        <property>
            <name>InputType</name>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the input type flag. This flag is used to determine the settings of the virtual keyboard.
Note that changing the input type will set the EditText to be in single line mode.
Example:&lt;code&gt;
EditText1.InputType = EditText1.INPUT_TYPE_NUMBERS&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>SingleLine</name>
            <parameter>
                <name>singleLine</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the EditText should be in single line mode or multiline mode.</comment>
        </property>
        <property>
            <name>SelectionLength</name>
            <returntype>int</returntype>
            <comment>Gets the selection length.</comment>
        </property>
        <field>
            <name>INPUT_TYPE_NONE</name>
            <comment>No keyboard will be displayed.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>INPUT_TYPE_TEXT</name>
            <comment>Default text mode.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>INPUT_TYPE_NUMBERS</name>
            <comment>Numeric keyboard will be displayed. Only numbers are accepted.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>INPUT_TYPE_DECIMAL_NUMBERS</name>
            <comment>Numeric keyboard will be displayed. Numbers, decimal point and minus sign are accepted.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>INPUT_TYPE_PHONE</name>
            <comment>Keyboard will be displayed in phone mode.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.CSBuilder</name>
        <shortname>CSBuilder</shortname>
        <comment>CSBuilder is similar to StringBuilder, however it creates CharSequences instead of regular strings.
These objects include styling information.
Except of the Image method, all styling methods begin a span. The span will end (closed) when you call Pop or PopAll.
It is convenient to call PopAll at the end to close any open spans. 
Example: &lt;code&gt;
Dim cs As CSBuilder
cs.Initialize.Color(Colors.Red).Bold.Append("Hello ").Pop.Underline.Append("World!!!").PopAll
Label1.Text = cs&lt;/code&gt;
The above code shows two red words. The first is bold and the second is underlined.</comment>
        <objectwrapper>android.text.SpannableStringBuilder</objectwrapper>
        <owner>process</owner>
        <event>Click (Tag As Object)</event>
        <method>
            <name>Size</name>
            <comment>Starts a text size span. Note that you should not use 'dip' units with text size dimensions.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
            <parameter>
                <name>Size</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Image</name>
            <comment>Adds an image span. This method will add a space character as a placeholder for the image.
Unlike the other methods you do not need to call Pop to close this span as it is closed automatically.
Bitmap - The image.
Width / Height - Image dimensions.
Baseline - If true then the image will be aligned based on the baseline. Otherwise it will be aligned based on the lowest descender in the text.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Baseline</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the builder. You can call this method multiple times to create new CharSequences.
Note that like most other methods it returns the current object.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
        </method>
        <method>
            <name>Alignment</name>
            <comment>Starts an alignment span.
Alignment - One of the following strings: ALIGN_NORMAL, ALIGN_OPPOSITE or ALIGN_CENTER.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
            <parameter>
                <name>Alignment</name>
                <type EnumType="true">android.text.Layout.Alignment</type>
            </parameter>
        </method>
        <method>
            <name>Strikethrough</name>
            <comment>Starts a strikethrough span.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
        </method>
        <method>
            <name>Clickable</name>
            <comment>Starts a clickable span. For the event to be raised you need to call the EnableClickEvents method.
Example:&lt;code&gt;
Sub Activity_Create(FirstTime As Boolean)
	Dim lbl As Label
	lbl.Initialize("")
	Activity.AddView(lbl, 0, 20dip, 100%x, 50dip)
	Dim cs As CSBuilder
	cs.Initialize.Size(20).Append("Click on underine word: ")
	cs.Clickable("cs", 1).Underline.Append("One").Pop.Pop
	cs.Append(", ").Clickable("cs", 2).Underline.Append("Two").PopAll
	cs.EnableClickEvents(lbl)
	lbl.Text = cs
End Sub

Sub cs_Click (Tag As Object)
	Log($"You have clicked on word: ${Tag}"$)
End Sub&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Tag</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Underline</name>
            <comment>Starts an underline span.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
        </method>
        <method>
            <name>RelativeSize</name>
            <comment>Starts a relative size span. The actual text size will be multiplied with the set Proportion.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
            <parameter>
                <name>Proportion</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>EnableClickEvents</name>
            <comment>This method should be called when using clickable spans.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Label</name>
                <type>android.widget.TextView</type>
            </parameter>
        </method>
        <method>
            <name>VerticalAlign</name>
            <comment>Starts a vertical alignment span.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
            <parameter>
                <name>Shift</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>PopAll</name>
            <comment>Closes all open spans.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
        </method>
        <method>
            <name>Typeface</name>
            <comment>Starts a custom typeface span.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
            <parameter>
                <name>Typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
        </method>
        <method>
            <name>Color</name>
            <comment>Starts a foreground color span.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ScaleX</name>
            <comment>Starts a scale X span. It horizontally scales the text.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
            <parameter>
                <name>Proportion</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>Pop</name>
            <comment>Closes the most recent span. All spans must be closed. You can call PopAll to close all open spans.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
        </method>
        <method>
            <name>Append</name>
            <comment>Appends the provided String or CharSequence.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>Bold</name>
            <comment>Starts a bold span.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
        </method>
        <method>
            <name>ToString</name>
            <comment>Returns a string with the characters.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>BackgroundColor</name>
            <comment>Starts a background color span.</comment>
            <returntype>anywheresoftware.b4a.objects.CSBuilder</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Length</name>
            <returntype>int</returntype>
            <comment>Returns the number of characters.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.ConcreteViewWrapper</name>
        <shortname>View</shortname>
        <comment>View is a special type of object. You cannot create new View objects. However all other view types can be assigned to a view variable.
This allows you to access the shared properties of all views.
For example this code hides all views of an activity:&lt;code&gt;
For i = 0 To Activity.NumberOfViews - 1
	Dim v As View
	v = Activity.GetView(i)
	v.Visible = False
Next&lt;/code&gt;</comment>
        <objectwrapper>android.view.View</objectwrapper>
        <owner>activity</owner>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.CompoundButtonWrapper.CheckBoxWrapper</name>
        <shortname>CheckBox</shortname>
        <comment>A CheckBox view. Unlike RadioButtons each CheckBox can be checked independently.</comment>
        <objectwrapper>android.widget.CheckBox</objectwrapper>
        <owner>activity</owner>
        <event>CheckedChange(Checked As Boolean)</event>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetTextSizeAnimated</name>
            <comment>Changes the text size with an animation effect.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SetTextColorAnimated</name>
            <comment>Changes the text color with a transition animation between the current color and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>Typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>TextSize</name>
            <returntype>float</returntype>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
            <comment>Get or sets the view's text size.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Text</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name RaisesSynchronousEvents="true">Checked</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Value</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Ellipsize</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>e</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets or sets the truncation mode. Only affects single line fields.
Possible values:
NONE
START - The three dots appear at the beginning.
MIDDLE - The three dots appear at the middle.
END - The three dots appear at the end.</comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>int</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
        <property>
            <name>SingleLine</name>
            <parameter>
                <name>singleLine</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the text field should be in single line mode or multiline mode.</comment>
        </property>
        <property>
            <name>Gravity</name>
            <returntype>int</returntype>
            <parameter>
                <name>Gravity</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.CompoundButtonWrapper.RadioButtonWrapper</name>
        <shortname>RadioButton</shortname>
        <comment>A RadioButton view. Only one RadioButton in a group can be checked. When a different RadioButton is checked all others will
 automatically be unchecked. Grouping is done by adding RadioButtons to the same activity or panel.</comment>
        <objectwrapper>android.widget.RadioButton</objectwrapper>
        <owner>activity</owner>
        <event>CheckedChange(Checked As Boolean)</event>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetTextSizeAnimated</name>
            <comment>Changes the text size with an animation effect.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SetTextColorAnimated</name>
            <comment>Changes the text color with a transition animation between the current color and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>Typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>TextSize</name>
            <returntype>float</returntype>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
            <comment>Get or sets the view's text size.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Text</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name RaisesSynchronousEvents="true">Checked</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Value</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Ellipsize</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>e</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets or sets the truncation mode. Only affects single line fields.
Possible values:
NONE
START - The three dots appear at the beginning.
MIDDLE - The three dots appear at the middle.
END - The three dots appear at the end.</comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>int</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
        <property>
            <name>SingleLine</name>
            <parameter>
                <name>singleLine</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the text field should be in single line mode or multiline mode.</comment>
        </property>
        <property>
            <name>Gravity</name>
            <returntype>int</returntype>
            <parameter>
                <name>Gravity</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.CompoundButtonWrapper.ToggleButtonWrapper</name>
        <shortname>ToggleButton</shortname>
        <comment>A ToggleButton view. This view which is similar to a button has two modes: ON and OFF.
When the user presses on it, it will change its mode.
You can set the text with the TextOn and TextOff properties.</comment>
        <objectwrapper>android.widget.ToggleButton</objectwrapper>
        <owner>activity</owner>
        <event>CheckedChange(Checked As Boolean)</event>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetTextSizeAnimated</name>
            <comment>Changes the text size with an animation effect.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SetTextColorAnimated</name>
            <comment>Changes the text color with a transition animation between the current color and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>Typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>TextSize</name>
            <returntype>float</returntype>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
            <comment>Get or sets the view's text size.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name RaisesSynchronousEvents="true">Checked</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Value</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>TextOn</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <comment>Gets or sets the text that will appear in the ON mode.</comment>
        </property>
        <property>
            <name>Ellipsize</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>e</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets or sets the truncation mode. Only affects single line fields.
Possible values:
NONE
START - The three dots appear at the beginning.
MIDDLE - The three dots appear at the middle.
END - The three dots appear at the end.</comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>TextOff</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <comment>Gets or sets the text that will appear in the OFF mode.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>int</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
        <property>
            <name>SingleLine</name>
            <parameter>
                <name>singleLine</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the text field should be in single line mode or multiline mode.</comment>
        </property>
        <property>
            <name>Gravity</name>
            <returntype>int</returntype>
            <parameter>
                <name>Gravity</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.ButtonWrapper</name>
        <shortname>Button</shortname>
        <comment>A Button view.
If you change the button's background you will usually want to use StateListDrawable which allows you to set the "default" drawable
and the "pressed" drawable.
Note that the Up and Down events are still implemented but should not be used as they will not work properly on all devices.</comment>
        <objectwrapper>android.widget.Button</objectwrapper>
        <owner>activity</owner>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetTextSizeAnimated</name>
            <comment>Changes the text size with an animation effect.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SetTextColorAnimated</name>
            <comment>Changes the text color with a transition animation between the current color and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>Typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>TextSize</name>
            <returntype>float</returntype>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
            <comment>Get or sets the view's text size.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Text</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Ellipsize</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>e</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets or sets the truncation mode. Only affects single line fields.
Possible values:
NONE
START - The three dots appear at the beginning.
MIDDLE - The three dots appear at the middle.
END - The three dots appear at the end.</comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>int</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
        <property>
            <name>SingleLine</name>
            <parameter>
                <name>singleLine</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the text field should be in single line mode or multiline mode.</comment>
        </property>
        <property>
            <name>Gravity</name>
            <returntype>int</returntype>
            <parameter>
                <name>Gravity</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.B4AException</name>
        <shortname>Exception</shortname>
        <comment>Holds a thrown exception.
You can access the last thrown exception by calling LastException.
For example:&lt;code&gt;
Try
   Dim in As InputStream
   in = File.OpenInput(File.DirInternal, "SomeMissingFile.txt")
   '...
Catch
   Log(LastException.Message)
End Try
If in.IsInitialized Then in.Close&lt;/code&gt;</comment>
        <objectwrapper>java.lang.Exception</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Message</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.AutoCompleteEditTextWrapper</name>
        <shortname>AutoCompleteEditText</shortname>
        <comment>An enhanced version of EditText which shows the user a drop down list with all items matching the currently entered characters.
Items matching are items starting with the current input or items that include a word that starts with the current input (words must be separated with spaces).
Call SetItems with the list of possible items.

ItemClick event is raised when the user clicks on an item from the list.
Example:&lt;code&gt;
Sub Process_Globals

End Sub

Sub Globals
	Dim ACT As AutoCompleteEditText
End Sub

Sub Activity_Create(FirstTime As Boolean)
	ACT.Initialize("ACT")
	Activity.AddView(ACT, 10dip, 10dip, 500dip, 80dip)
	Dim countries() As String
	countries = Array As String( _
		"Afghanistan", "Albania", "Algeria", "American Samoa", "Andorra", _
		"Angola", "Anguilla", "Antarctica", "Antigua and Barbuda", "Argentina", _
		"Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", _
		"Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", _
		"Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", _
		"Bosnia and Herzegovina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", _
		"British Virgin Islands", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", _
		"Cote d'Ivoire", "Cambodia", "Cameroon", "Canada", "Cape Verde", _
		"Cayman Islands", "Central African Republic", "Chad", "Chile", "China", _
		"Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", _
		"Cook Islands", "Costa Rica", "Croatia", "Cuba", "Cyprus", "Czech Republic", _
		"Democratic Republic of the Congo", "Denmark", "Djibouti", "Dominica", "Dominican Republic", _
		"East Timor", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", _
		"Estonia", "Ethiopia", "Faeroe Islands", "Falkland Islands", "Fiji", "Finland", _
		"Former Yugoslav Republic of Macedonia", "France", "French Guiana", "French Polynesia", _
		"French Southern Territories", "Gabon", "Georgia", "Germany", "Ghana", "Gibraltar", _
		"Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guinea", "Guinea-Bissau", _
		"Guyana", "Haiti", "Heard Island and McDonald Islands", "Honduras", "Hong Kong", "Hungary", _
		"Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", _
		"Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", _
		"Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", _
		"Macau", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", _
		"Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia", "Moldova", _
		"Monaco", "Mongolia", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", _
		"Nauru", "Nepal", "Netherlands", "Netherlands Antilles", "New Caledonia", "New Zealand", _
		"Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "North Korea", "Northern Marianas", _
		"Norway", "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru", _
		"Philippines", "Pitcairn Islands", "Poland", "Portugal", "Puerto Rico", "Qatar", _
		"Reunion", "Romania", "Russia", "Rwanda", "Sqo Tome and Principe", "Saint Helena", _
		"Saint Kitts and Nevis", "Saint Lucia", "Saint Pierre and Miquelon", _
		"Saint Vincent and the Grenadines", "Samoa", "San Marino", "Saudi Arabia", "Senegal", _
		"Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", _
		"Somalia", "South Africa", "South Georgia and the South Sandwich Islands", "South Korea", _
		"Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard and Jan Mayen", "Swaziland", "Sweden", _
		"Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "The Bahamas", _
		"The Gambia", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", _
		"Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Virgin Islands", "Uganda", _
		"Ukraine", "United Arab Emirates", "United Kingdom", _
		"United States", "United States Minor Outlying Islands", "Uruguay", "Uzbekistan", _
		"Vanuatu", "Vatican City", "Venezuela", "Vietnam", "Wallis and Futuna", "Western Sahara", _
		"Yemen", "Yugoslavia", "Zambia", "Zimbabwe")
	ACT.SetItems(countries)
End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub&lt;/code&gt;</comment>
        <objectwrapper>android.widget.EditText</objectwrapper>
        <owner>process</owner>
        <event>ItemClick (Value As String)</event>
        <event>TextChanged (Old As String, New As String)</event>
        <event>EnterPressed</event>
        <event>FocusChanged (HasFocus As Boolean)</event>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SelectAll</name>
            <comment>Selects the entire text.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetTextSizeAnimated</name>
            <comment>Changes the text size with an animation effect.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment>Changes the Z order of this view and brings it to the front.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>SetTextColorAnimated</name>
            <comment>Changes the text color with a transition animation between the current color and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SendToBack</name>
            <comment>Changes the Z order of this view and sends it to the back.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetItems</name>
            <comment>Sets the list of possible items.
The items visual style will be the same as the style of the main text.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Items</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>ShowDropDown</name>
            <comment>Forces the drop down list to appear.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment>Removes this view from its parent.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>DismissDropDown</name>
            <comment>Forces the drop down list to disappear.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetItems2</name>
            <comment>Sets the list of possible items and specifies their style.
Example:&lt;code&gt;
Dim act As AutoCompleteEditText
act.Initialize("act")
Activity.AddView(act, 10dip, 10dip, 200dip, 80dip)
act.SetItems2(Array As String("aab", "abc"), act.Typeface, Gravity.LEFT, 12, Colors.Green) &lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Items</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
            <parameter>
                <name>Typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
            <parameter>
                <name>Gravity</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>TextColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>SetSelection</name>
            <comment>Sets the selected text.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Wrap</name>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the text content will wrap within the EditText bounds. Relevant when the EditText is in multiline mode.
Example:&lt;code&gt;
EditText1.Wrap = False&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's left position.</comment>
        </property>
        <property>
            <name>ForceDoneButton</name>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <comment>By default the OS sets the virtual keyboard action key to display Done or Next according to the specific layout.
You can force it to display Done by setting this value to True.
Example:&lt;code&gt;
EditText1.ForceDoneButton = True&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Hint</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets or sets the text that will appear when the EditText is empty.
Example:&lt;code&gt;
EditText1.Hint = "Enter username"&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>SelectionStart</name>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the selection start position (or the cursor position).
Returns -1 if there is no selection or cursor.</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>int</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
        <property>
            <name>Gravity</name>
            <returntype>int</returntype>
            <parameter>
                <name>Gravity</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>HintColor</name>
            <returntype>int</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the hint text color.
Example:&lt;code&gt;
EditText1.HintColor = Colors.Gray&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>Typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>TextSize</name>
            <returntype>float</returntype>
            <parameter>
                <name>TextSize</name>
                <type>float</type>
            </parameter>
            <comment>Get or sets the view's text size.</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PasswordMode</name>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the EditText should be in password mode and hide the actual characters.</comment>
        </property>
        <property>
            <name RaisesSynchronousEvents="true">Text</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Ellipsize</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>e</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets or sets the truncation mode. Only affects single line fields.
Possible values:
NONE
START - The three dots appear at the beginning.
MIDDLE - The three dots appear at the middle.
END - The three dots appear at the end.</comment>
        </property>
        <property>
            <name>InputType</name>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the input type flag. This flag is used to determine the settings of the virtual keyboard.
Note that changing the input type will set the EditText to be in single line mode.
Example:&lt;code&gt;
EditText1.InputType = EditText1.INPUT_TYPE_NUMBERS&lt;/code&gt;</comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's top position.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>SingleLine</name>
            <parameter>
                <name>singleLine</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether the EditText should be in single line mode or multiline mode.</comment>
        </property>
        <property>
            <name>SelectionLength</name>
            <returntype>int</returntype>
            <comment>Gets the selection length.</comment>
        </property>
        <field>
            <name>INPUT_TYPE_NONE</name>
            <comment>No keyboard will be displayed.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>INPUT_TYPE_TEXT</name>
            <comment>Default text mode.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>INPUT_TYPE_NUMBERS</name>
            <comment>Numeric keyboard will be displayed. Only numbers are accepted.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>INPUT_TYPE_DECIMAL_NUMBERS</name>
            <comment>Numeric keyboard will be displayed. Numbers, decimal point and minus sign are accepted.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>INPUT_TYPE_PHONE</name>
            <comment>Keyboard will be displayed in phone mode.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.ActivityWrapper</name>
        <shortname>Activity</shortname>
        <comment>Each activity module include a predefined Activity object.
Activity is the main component of your application.
Activities have three special life cycle related event: Activity_Create, Activity_Resume and Activity_Pause.
See this tutorial for more information about activities and processes life cycle: &lt;link&gt;Life cycle tutorial|http://www.basic4ppc.com/forum/basic4android-getting-started-tutorials/6487-android-process-activities-life-cycle.html&lt;/link&gt;.

You can add and remove views to this activity with AddView and RemoveViewAt methods.
You can also load a layout file with LoadLayout.
The Touch event can be used to handle user touches. 
The first parameter of this event is the Action parameter. The parameter values can be ACTION_DOWN,
ACTION_MOVE or ACTION_UP. Use this value to find the user current action.
The KeyPress and KeyUp events occur when the user presses or releases a key, assuming that no other view has consumed this event (like EditText).
When handling the KeyPress or KeyUp event you should return a boolean value which tells whether the event was consumed.
For example if the user pressed on the Back key and you return True then the OS will not close your activity.
&lt;code&gt;
Sub Activity_KeyPress (KeyCode As Int) As Boolean
	If Keycode = KeyCodes.KEYCODE_BACK Then
		Return True
	Else
		Return False
	End If
End Sub&lt;/code&gt;
You can add menu items to the activity with AddMenuItem method. Note that this method should only be called inside
Activity_Create event.
Starting from Android 4.3 it is not possible to show a modal dialog inside the KeyPress or KeyUp events, with one exception which is in the case of the Back key.
If you need to show a modal dialog for other keys then you should call a sub with CallSubDelayed and show the modal dialog in that sub.</comment>
        <objectwrapper>anywheresoftware.b4a.BALayout</objectwrapper>
        <owner>activity</owner>
        <event>Touch (Action As Int, X As Float, Y As Float)</event>
        <event>KeyPress (KeyCode As Int) As Boolean 'Return True to consume the event</event>
        <event>KeyUp (KeyCode As Int) As Boolean</event>
        <event>WindowFocusChanged (Focused As Boolean)</event>
        <event>ActionBarHomeClick</event>
        <event>PermissionResult (Permission As String, Result As Boolean)</event>
        <event>Click</event>
        <event>LongClick</event>
        <method>
            <name>AddMenuItem2</name>
            <comment>Adds a menu item to the activity.
Title - Menu item title.
EventName - The prefix name of the sub that will handle the click event.
Bitmap - Bitmap to draw as the item background.
Only the first five (or six if there are six total) menu items display icons.
This method should only be called inside sub Activity_Create.
Note that the 'Sender' value inside the click event equals to the clicked menu item text.
Example:&lt;code&gt;
Activity.AddMenuItem2("Open File", "OpenFile", LoadBitmap(File.DirAssets, "SomeImage.png"))
...
Sub OpenFile_Click
...
End Sub&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>GetView</name>
            <comment>Gets the view that is stored in the specified index.</comment>
            <returntype>anywheresoftware.b4a.objects.ConcreteViewWrapper</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>RerunDesignerScript</name>
            <comment>&lt;b&gt;This method is deprecated.&lt;/b&gt; It ignores the anchoring features and it will fail in Rapid Debug mode.
You should instead remove the views and load the layout again.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Layout</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>AddView</name>
            <comment>Adds a view to this activity.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>View</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>GetStartingIntent</name>
            <comment>(Advanced) Gets the intent object that started this Activity.
This can be used together with SetActivityResult to return results to 3rd party applications.</comment>
            <returntype>anywheresoftware.b4a.objects.IntentWrapper</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetAllViewsRecursive</name>
            <comment>Returns an iterator that iterates over all the child views including views that were added to other child views.
Example:&lt;code&gt;
For Each v As View In Activity.GetAllViewsRecursive
	...
Next&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.BA.IterableList</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the view and sets the subs that will handle the events.
&lt;b&gt;Views added with the designer should NOT be initialized. These views are initialized when the layout is loaded.&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetLayout</name>
            <comment>Changes the view position and size.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RemoveViewAt</name>
            <comment>Removes the view that is stored in the specified index.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Finish</name>
            <comment>Closes this activity.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment>Changes the view visibility with a fade-in or fade-out animation.
You must 
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.
Visible - New visibility state.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Visible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>SetActivityResult</name>
            <comment>(Advanced) Sets the result that the calling Activity will get after calling StartActivityForResult.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Result</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Data</name>
                <type>anywheresoftware.b4a.objects.IntentWrapper</type>
            </parameter>
        </method>
        <method>
            <name>AddMenuItem</name>
            <comment>Adds a menu item to the activity.
Title - Menu item title.
EventName - The prefix name of the sub that will handle the click event.
This method should only be called inside sub Activity_Create.
Note that the 'Sender' value inside the click event equals to the clicked menu item text.
Example:&lt;code&gt;
Activity.AddMenuItem("Open File", "OpenFile")
...
Sub OpenFile_Click
...
End Sub&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment>Invalidates the given rectangle.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name RaisesSynchronousEvents="true">LoadLayout</name>
            <comment>Loads a layout file (.bal).
Returns the LayoutValues of the actual layout variant that was loaded.</comment>
            <returntype>anywheresoftware.b4a.keywords.LayoutValues</returntype>
            <parameter>
                <name>LayoutFile</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment>Changes the background color with a transition animation between the FromColor and the ToColor colors.
The transition is based on the HSV color space.
Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>FromColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ToColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>OpenMenu</name>
            <comment>Programmatically opens the menu.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name DesignerName="SetBackgroundImage">SetBackgroundImageNew</name>
            <comment>Creates a BitmapDrawable with the given Bitmap and sets it as the view's background. The Gravity is set to FILL.
The BitmapDrawable is returned. You can use it to change the Gravity.</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>DisableAccessibility</name>
            <comment>This method was added as a workaround for the following &lt;link&gt;Android bug|https://code.google.com/p/android/issues/detail?id=55933&lt;/link&gt;.
 By setting the Disable property to True the child views (of all Activities) will not be added to the accessibility enabled list.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Disable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RemoveAllViews</name>
            <comment>Removes all child views.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate</name>
            <comment>Invalidates the whole view forcing the view to redraw itself.
Redrawing will only happen when the program can process messages. Usually when it finishes running the current code.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>CloseMenu</name>
            <comment>Programmatically closes the menu.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>AddMenuItem3</name>
            <comment>Similar to AddMenuItem2. If AddToActionBar is true then the item will be displayed in the action bar (on Android 3.0+ devices) if there is enough room.
If there is not enough room then the item will be displayed together with the other menu items.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>AddToActionBar</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment>Similar to SetLayout. Animates the change. Note that the animation will only be applied when running on Android 3+ devices.
Duration - Animation duration measured in milliseconds.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Duration</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment>Tries to set the focus to this view.
Returns True if the focus was set.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>left</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Gets or sets the background drawable.</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment>Returns the view's parent. In most cases the returned value can be casted to a Panel.
Returns Null if there is no parent.</comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Sets the background of the view to be a ColorDrawable with the given color.
If the current background is of type GradientDrawable or ColorDrawable the round corners will be kept.</comment>
        </property>
        <property>
            <name>NumberOfViews</name>
            <returntype>int</returntype>
            <comment>Returns the number of child views.</comment>
        </property>
        <property>
            <name>Title</name>
            <returntype>java.lang.CharSequence</returntype>
            <parameter>
                <name>Title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>top</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>p</name>
                <type>int[]</type>
            </parameter>
            <comment>Gets or sets the view's padding (distance between border and content).
The data is stored in a 4 element array with the following values: left, top, right and bottom.
Make sure to use 'dip' units when setting the padding. 
Example: &lt;code&gt;Button1.Padding = Array As Int (30dip, 10dip, 10dip, 10dip)&lt;/code&gt;</comment>
        </property>
        <property>
            <name>TitleColor</name>
            <returntype>int</returntype>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the title color. This property is only supported by Android 2.x devices. It will not do anything on newer devices.</comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>height</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's height.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the Tag value. This is a place holder which can used to store additional data.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>width</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment>Gets or sets the view's width.</comment>
        </property>
        <field>
            <name>ACTION_MOVE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ACTION_DOWN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ACTION_UP</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.collections.Map</name>
        <shortname>Map</shortname>
        <comment>A collection that holds pairs of keys and values. The keys are unique. Which means that if you add a key/value pair (entry) and
the collection already holds an entry with the same key, the previous entry will be removed from the map.
Fetching an item is done by looking for its key. This is usually a very fast operation (O(1) compared to O(n) in a list).
The key should be a string or a number. The value can be any type of object.
Note that this map implementation does return items in the same order as they were added.
Usually you will use Put to add items and Get or GetDefault to get the values based on the key.
If you need to iterate over all the items you can use a For loop like:&lt;code&gt;
For Each Key As String In Map.Keys
 Dim Value As Object = Map.Get(Key)
Next&lt;/code&gt;
Similar to a list, a map can hold any object, however if it is a process global variable then it cannot hold activity objects (like views).
Maps are very useful for storing applications settings. 
You can save and load maps with "simple values" with File.WriteMap and File.ReadMap. More complex maps can be saved with B4XSerializator.</comment>
        <objectwrapper>anywheresoftware.b4a.objects.collections.Map.MyMap</objectwrapper>
        <owner>process</owner>
        <method>
            <name>GetValueAt</name>
            <comment>Returns the value of the item at the given index.
GetKeyAt and GetValueAt should be used to iterate over all the items.
These methods are optimized for iterating over the items in ascending order.
Example:&lt;code&gt;
For i = 0 to Map.Size - 1
	Log("Key: " &amp; Map.GetKeyAt(i))
	Log("Value: " &amp; Map.GetValueAt(i))
Next&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Values</name>
            <comment>Returns an object which can be used to iterate over all the values with a For Each block.
Example:&lt;code&gt;
For Each v As Int In map1.Values
	Log(v)
Next&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.BA.IterableList</returntype>
        </method>
        <method>
            <name>Remove</name>
            <comment>Removes the item with the given key, if such exists.
Returns the item removed or null if no matching item was found.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Key</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the object.
Example:&lt;code&gt;
Dim Map1 As Map
Map1.Initialize&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Put</name>
            <comment>Puts a key/value pair in the map, overwriting the previous item with this key (if such exists).
Returns the previous item with this key or null if there was no such item.
Note that if you are using strings as the keys then the keys are case sensitive.
Example:&lt;code&gt;
Map1.Put("Key", "Value")&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Key</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Value</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Clear</name>
            <comment>Clears all items from the map.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ContainsKey</name>
            <comment>Tests whether there is an item with the given key.
Example:&lt;code&gt;
If Map.ContainsKey("some key") Then ... &lt;/code&gt;</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Key</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Get</name>
            <comment>Returns the value of the item with the given key.
Returns Null if the value doesn't exist.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Key</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>GetKeyAt</name>
            <comment>Returns the key of the item at the given index.
GetKeyAt and GetValueAt should be used to iterate over all the items.
These methods are optimized for iterating over the items in ascending order.
Example:&lt;code&gt;
For i = 0 to Map.Size - 1
	Log("Key: " &amp; Map.GetKeyAt(i))
	Log("Value: " &amp; Map.GetValueAt(i))
Next&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Keys</name>
            <comment>Returns an object which can be used to iterate over all the keys with a For Each block.
Example:&lt;code&gt;
For Each k As String In map1.Keys
	Log(k)
Next&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.BA.IterableList</returntype>
        </method>
        <method>
            <name>GetDefault</name>
            <comment>Returns the value of the item with the given key. If no such item exists the specified default value is returned.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Key</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Default</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <property>
            <name>Size</name>
            <returntype>int</returntype>
            <comment>Returns the number of items stored in the map.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.collections.List</name>
        <shortname>List</shortname>
        <comment>Lists are similar to dynamic arrays. You can add and remove items from a list and it will change its size accordingly.
A list can hold any type of object. However if a list is declared as a process global object it cannot hold activity objects (like views).
Basic4android automatically converts regular arrays to lists. So when a List parameter is expected you can pass an array instead.
For example:&lt;code&gt;
Dim List1 As List
List1.Initialize
List1.AddAll(Array As Int(1, 2, 3, 4, 5))&lt;/code&gt;
Use the Get method to get an item from the list.
Lists can be saved and loaded from files using File.WriteList and File.ReadList.
You can use a For loop to iterate over all the values:&lt;code&gt;
For i = 0 To List1.Size - 1
 Dim number As Int
 number = List1.Get(i)
 ...
Next&lt;/code&gt;</comment>
        <objectwrapper>java.util.List</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Add</name>
            <comment>Adds an item at the end of the list.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>item</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Set</name>
            <comment>Replaces the current item in the specified index with the new item.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Item</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>SortCaseInsensitive</name>
            <comment>Lexicographically sorts the list, ignoring the characters case.
The items must all be numbers or strings.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Ascending</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IndexOf</name>
            <comment>Returns the index of the specified item, or -1 if it was not found.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Item</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>InsertAt</name>
            <comment>Inserts the specified element in the specified index, before the current item at that index.
As a result all items with index equal to or larger than the specified index are shifted.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Item</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes an empty list.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SortTypeCaseInsensitive</name>
            <comment>Similar to SortType. Lexicographically sorts the list, ignoring the characters case.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>FieldName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Ascending</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Clear</name>
            <comment>Removes all the items from the list.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SortType</name>
            <comment>Sorts a list with items of user defined type. The list is sorted based on the specified field.
FieldName - The case-sensitive field name that will be used for sorting. Field must contain numbers or strings.
Ascending - Whether to sort ascending or descending.
Example:&lt;code&gt;
Sub Process_Globals
	Type Person(Name As String, Age As Int)
End Sub

Sub Activity_Create(FirstTime As Boolean)
	Dim Persons As List
	Persons.Initialize
	For i = 1 To 50
		Dim p As Person
		p.Name = "Person" &amp; i
		p.Age = Rnd(0, 121)
		Persons.Add(p)
	Next
	Persons.SortType("Age", True) 'Sort the list based on the Age field.
	For i = 0 To Persons.Size - 1
		Dim p As Person
		p = Persons.Get(i)
		Log(p)
	Next
End Sub&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>FieldName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Ascending</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Initializes a list with the given values. This method should be used to convert arrays to lists.
Note that if you pass a list to this method then both objects will share the same list,
and if you pass an array the list will be of a fixed size. Meaning that you cannot later add or remove items.
Example:&lt;code&gt;
Dim List1 As List
List1.Initialize2(Array As Int(1,2,3,4,5))&lt;/code&gt;
Example:&lt;code&gt;
Dim List1 As List
Dim SomeArray(10) As String
'Fill array...
List1.Initialize2(SomeArray)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Array</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>AddAllAt</name>
            <comment>Adds all elements in the specified collection starting at the specified index.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>List</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>Get</name>
            <comment>Gets the item in the specified index. The item is not removed from the list.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Sort</name>
            <comment>Sorts the list.
The items must all be numbers or strings.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Ascending</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>AddAll</name>
            <comment>Adds all elements in the specified collection to the end of the list.
Note that you can add an array directly.
Example:&lt;code&gt;
List.AddAll(Array As String("value1", "value2"))&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>List</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>RemoveAt</name>
            <comment>Removes the item at the specified index.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Size</name>
            <returntype>int</returntype>
            <comment>Returns the number of items in the list.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.keywords.StringBuilderWrapper</name>
        <shortname>StringBuilder</shortname>
        <comment>StringBuilder is a mutable string, unlike regular strings which are immutable.
StringBuilder is especially useful when you need to concatenate many strings.
The following code demonstrates the performance boosting of StringBuilder:&lt;code&gt;
Dim start As Long
start = DateTime.Now
'Regular string
Dim s As String
For i = 1 To 5000
	s = s &amp; i
Next
Log(DateTime.Now - start)
'StringBuilder
start = DateTime.Now
Dim sb As StringBuilder
sb.Initialize
For i = 1 To 5000
	sb.Append(i)
Next
Log(DateTime.Now - start)&lt;/code&gt;
Tested on a real device, the first 'for loop' took about 20 seconds and the second took less then tenth of a second.
The reason is that the code: &lt;code&gt;s = s &amp; i&lt;/code&gt; creates a new string each iteration (strings are immutable).
The method &lt;code&gt;StringBuilder.ToString&lt;/code&gt; converts the object to a string.</comment>
        <objectwrapper>java.lang.StringBuilder</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Remove</name>
            <comment>Removes the specified characters.
StartOffset - The first character to remove.
EndOffset - The ending index. This character will not be removed.</comment>
            <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>EndOffset</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Insert</name>
            <comment>Inserts the specified text at the specified offset.</comment>
            <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
            <parameter>
                <name>Offset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the object.
Example:&lt;code&gt;
Dim sb As StringBuilder
sb.Initialize
sb.Append("The value is: ").Append(SomeOtherVariable).Append(CRLF)&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Append</name>
            <comment>Appends the specified text at the end.
Returns the same object, so you can chain methods.
Example:&lt;code&gt;
sb.Append("First line").Append(CRLF).Append("Second line")&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.keywords.StringBuilderWrapper</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ToString</name>
            <comment>Converts the object to a string.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <property>
            <name>Length</name>
            <returntype>int</returntype>
            <comment>Returns the number of characters.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.keywords.Regex</name>
        <comment>Regex is a predefined object that contains regular expressions methods.
All methods receive a 'pattern' string. This is the regular expression pattern.
More information about the regular expression engine can be found here: &lt;link&gt;Pattern Javadoc|http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html&lt;/link&gt;
&lt;link&gt;Regular expression in Basic4android tutorial|http://www.basic4ppc.com/forum/basic4android-getting-started-tutorials/7123-regular-expressions-tutorial.html&lt;/link&gt;.</comment>
        <owner>process</owner>
        <method>
            <name>Replace</name>
            <comment>Replaces all the matches in the text based on the specified pattern and template.
Example:&lt;code&gt;
Log(Regex.Replace("\d", "1 2 3 4", "-$0-")) '-1- -2- -3- -4-&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Pattern</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Template</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsMatch2</name>
            <comment>Tests whether the given text is a match for the given pattern.
Options - One or more pattern options. These options can be combined with Bit.Or.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Pattern</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Options</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsMatch</name>
            <comment>Tests whether the given text is a match for the given pattern.
The whole text should match the pattern. Use Matcher if you look for a substring that matches the pattern.
Example:&lt;code&gt;
If Regex.IsMatch("\d\d\d", EditText1.Text) = False Then ...&lt;/code&gt;</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Pattern</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Matcher</name>
            <comment>Returns a Matcher object which can be used to find matches of the given pattern in the text.
Example:&lt;code&gt;
Dim text, pattern As String
text = "This is an interesting sentence with two numbers: 123456 and 7890."
pattern = "\d+" 'one or more digits
Dim Matcher1 As Matcher
Matcher1 = Regex.Matcher(pattern, text)
Do While Matcher1.Find
	Log("Found: " &amp; Matcher1.Match)
Loop&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.keywords.Regex.MatcherWrapper</returntype>
            <parameter>
                <name>Pattern</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Split2</name>
            <comment>Same as Split with the additional pattern options.</comment>
            <returntype>java.lang.String[]</returntype>
            <parameter>
                <name>Pattern</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Options</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Replace2</name>
            <comment>Similar to Replace. Allows setting the regex options.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Pattern</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Options</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Template</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Split</name>
            <comment>Splits the given text around matches of the pattern.
Note that trailing empty matches will be removed.
Example:&lt;code&gt;
Dim components() As String
components = Regex.Split(",", "abc,def,,ghi") 'returns: "abc", "def", "", "ghi"&lt;/code&gt;</comment>
            <returntype>java.lang.String[]</returntype>
            <parameter>
                <name>Pattern</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Matcher2</name>
            <comment>Same as Matcher with the additional pattern options.</comment>
            <returntype>anywheresoftware.b4a.keywords.Regex.MatcherWrapper</returntype>
            <parameter>
                <name>Pattern</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Options</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <field>
            <name>CASE_INSENSITIVE</name>
            <comment>Enables case insensitive matching.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MULTILINE</name>
            <comment>Changes ^ and $ to match the start and end of each line instead of the whole string.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.keywords.Regex.MatcherWrapper</name>
        <shortname>Matcher</shortname>
        <comment>A Matcher object is used to search for a pattern in a string.
&lt;code&gt;Regex.Matcher&lt;/code&gt; returns a matcher object for a specific pattern and specific text.
Example:&lt;code&gt;
Dim text, pattern As String
text = "This is an interesting sentence with two numbers: 123456 and 7890."
pattern = "\d+" 'one or more digits
Dim Matcher1 As Matcher
Matcher1 = Regex.Matcher(pattern, text)
Do While Matcher1.Find
	Log("Found: " &amp; Matcher1.Match)
Loop&lt;/code&gt;</comment>
        <objectwrapper>java.util.regex.Matcher</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Group</name>
            <comment>Returns the value of the specified captured group.
Group(0) returns the whole match.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Find</name>
            <comment>Searches for the next substring that matches the pattern.
Returns True if such a match was found.
Example:&lt;code&gt;
Dim text, pattern As String
text = "This is an interesting sentence with two numbers: 123456 and 7890."
pattern = "\d+" 'one or more digits
Dim Matcher1 As Matcher
Matcher1 = Regex.Matcher(pattern, text)
Do While Matcher1.Find
	Log("Found: " &amp; Matcher1.Match)
Loop&lt;/code&gt;</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetEnd</name>
            <comment>Returns the end offset of the specified captured group.
Use GetEnd(0) to get the end offset of the whole match.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetStart</name>
            <comment>Returns the start offset of the specified captured group.
Use GetStart(0) to get the start offset of the whole match.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>GroupCount</name>
            <returntype>int</returntype>
            <comment>Returns the number of capturing groups in the pattern.
Note that the number returned does not include group(0) which is the whole match.</comment>
        </property>
        <property>
            <name>Match</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the matched value. This is the same as calling Group(0).</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.keywords.LayoutValues</name>
        <shortname>LayoutValues</shortname>
        <comment>Holds values related to the display.
You can get the values of the the current display by calling &lt;code&gt;GetDeviceLayoutValues&lt;/code&gt;.
For example:&lt;code&gt;
Dim lv As LayoutValues
lv = GetDeviceLayoutValues
Log(lv) 'will print the values to the log&lt;/code&gt;
&lt;code&gt;Activity.LoadLayout&lt;/code&gt; and &lt;code&gt;Panel.LoadLayout&lt;/code&gt; return a LayoutValues object with the values of the
chosen layout variant.</comment>
        <owner>process</owner>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <property>
            <name>ApproximateScreenSize</name>
            <returntype>double</returntype>
            <comment>Returns the approximate screen size.</comment>
        </property>
        <field>
            <name>Scale</name>
            <comment>The device scale value which is equal to 'dots per inch' / 160.</comment>
            <returntype>float</returntype>
        </field>
        <field>
            <name>Height</name>
            <comment>The display height (pixels).</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Width</name>
            <comment>The display width (pixels).</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.keywords.LayoutBuilder.LayoutValuesAndMap</name>
        <owner>process</owner>
        <field>
            <name>map</name>
            <comment></comment>
            <returntype>java.util.LinkedHashMap</returntype>
        </field>
        <field>
            <name>layoutValues</name>
            <comment></comment>
            <returntype>anywheresoftware.b4a.keywords.LayoutValues</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.keywords.DateTime</name>
        <comment>Date and time related methods.
DateTime is a predefined object. You should not declare it yourself.
Date and time values are stored as ticks. Ticks are the number of milliseconds since January 1, 1970 00:00:00 UTC.
&lt;b&gt;This value is too large to be stored in an Int variable. It should only be stored in a Long variable.&lt;/b&gt;
The methods &lt;code&gt;DateTime.Date&lt;/code&gt; and &lt;code&gt;DateTime.Time&lt;/code&gt; convert the ticks value to a string.
You can get the current time with &lt;code&gt;DateTime.Now&lt;/code&gt;.
Example:&lt;code&gt;
Dim now As Long
now = DateTime.Now
Msgbox("The date is: " &amp; DateTime.Date(now) &amp; CRLF &amp; _
	"The time is: " &amp; DateTime.Time(now), "")&lt;/code&gt;</comment>
        <owner>process</owner>
        <event>TimeChanged</event>
        <method>
            <name>Add</name>
            <comment>Returns a ticks value which is the result of adding the specified time spans to the given ticks value.
Pass negative values if you want to subtract the values.
Example:&lt;code&gt;
Dim Tomorrow As Long
Tomorrow = DateTime.Add(DateTime.Now, 0, 0, 1)
Log("Tomorrow date is: " &amp; DateTime.Date(Tomorrow))&lt;/code&gt;</comment>
            <returntype>long</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>Years</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Months</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Days</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetHour</name>
            <comment>Returns the hour of day component from the ticks value.
Values are between 0 to 23.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>TimeParse</name>
            <comment>Parses the given time string and returns its ticks representation.
Note that the returned value date will be today.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>Time</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>DateParse</name>
            <comment>Parses the given date string and returns its ticks representation.
An exception will be thrown if parsing fails.
Example:&lt;code&gt;
Dim SomeTime As Long
SomeTime = DateTime.DateParse("02/23/2007")&lt;/code&gt;</comment>
            <returntype>long</returntype>
            <parameter>
                <name>Date</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>DateTimeParse</name>
            <comment>Parses the given date and time strings and returns the ticks representation.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>Date</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Time</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetMonth</name>
            <comment>Returns the month of year component from the ticks value.
Values are between 1 to 12.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>Time</name>
            <comment>Returns a string representation of the time (which is stored as ticks).
The time format can be set with the TimeFormat keyword.
Example:&lt;code&gt;
Log("The time now is: " &amp; DateTime.Time(DateTime.Now))&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>Date</name>
            <comment>Returns a string representation of the date (which is stored as ticks).
The date format can be set with the DateFormat keyword.
Example:&lt;code&gt;
Log("Today is: " &amp; DateTime.Date(DateTime.Now))&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GetSecond</name>
            <comment>Returns the seconds within a minute component from the ticks value.
Values are between 0 to 59.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GetMinute</name>
            <comment>Returns the minutes within a hour component from the ticks value.
Values are between 0 to 59.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GetTimeZoneOffsetAt</name>
            <comment>Returns the offset measured in hours from UTC at the specified date (offset can change due to daylight saving settings).</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Date</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GetYear</name>
            <comment>Returns the year component from the ticks value.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GetDayOfYear</name>
            <comment>Returns the day of year component from the ticks value.
Values are between 1 to 366.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>SetTimeZone</name>
            <comment>Sets the application time zone. This setting affect the conversions of dates to ticks value and vice versa (device default settings are not changed).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>OffsetHours</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>GetDayOfMonth</name>
            <comment>Returns the day of month component from the ticks value.
Values are between 1 to 31.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>GetDayOfWeek</name>
            <comment>Returns the day of week component from the ticks value.
Values are between 1 to 7, where 1 means Sunday.
You can use the AHLocale library if you need to change the first day.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Ticks</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>ListenToExternalTimeChanges</name>
            <comment>Creates a dynamic broadcast receiver that listens to the "time-zone changed" event and "time set" event.
By calling this method the time-zone will update automatically when the device time-zone changes.
DateTime_TimeChanged event will be raised when the time-zone changes or when the time is set.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <property>
            <name>TimeFormat</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Pattern</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets or sets the format used to parse time strings.
See this page for the supported patterns: &lt;link&gt;formats|http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html&lt;/link&gt;.
The default pattern is HH:mm:ss (23:45:12 for example).</comment>
        </property>
        <property>
            <name>DeviceDefaultTimeFormat</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the default time format based on the device selected language.</comment>
        </property>
        <property>
            <name>Now</name>
            <returntype>long</returntype>
            <comment>Gets the current time as ticks (number of milliseconds since January 1, 1970).</comment>
        </property>
        <property>
            <name>DateFormat</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Pattern</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets or sets the format used to parse date strings.
See this page for the supported patterns: &lt;link&gt;formats|http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html&lt;/link&gt;.
The default pattern is MM/dd/yyyy (04/23/2002 for example).</comment>
        </property>
        <property>
            <name>DeviceDefaultDateFormat</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the default date format based on the device selected language.</comment>
        </property>
        <property>
            <name>TimeZoneOffset</name>
            <returntype>double</returntype>
            <comment>Returns the current offset measured in hours from UTC.</comment>
        </property>
        <field>
            <name>TicksPerSecond</name>
            <comment></comment>
            <returntype>long</returntype>
        </field>
        <field>
            <name>TicksPerMinute</name>
            <comment></comment>
            <returntype>long</returntype>
        </field>
        <field>
            <name>TicksPerDay</name>
            <comment></comment>
            <returntype>long</returntype>
        </field>
        <field>
            <name>TicksPerHour</name>
            <comment></comment>
            <returntype>long</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.keywords.Common</name>
        <owner>activity</owner>
        <method>
            <name>PerYToCurrent</name>
            <comment>Returns the actual size of the given percentage of the activity height.
Example:
Button1.Height = PerYToCurrent(50) 'Button1.Height = 50% * Activity.Height

A shorthand syntax for this method is available. Any number followed by the string '%y'
will be converted in the same manner (no spaces are allowed between the number and '%y').
So the previous code is equivalent to:
Button1.Height = 50%y</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Percentage</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>CallSubDelayed3</name>
            <comment>Similar to CallSubDelayed. Calls a sub with two arguments.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Component</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Sub</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Argument1</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Argument2</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>RndSeed</name>
            <comment>Sets the random seed value. 
This method can be used for debugging as it allows you to get the same results each time.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Seed</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>CallSubDelayed2</name>
            <comment>Similar to CallSubDelayed. Calls a sub with a single argument.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Component</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Sub</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Argument</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>GetDeviceLayoutValues</name>
            <comment>Returns the device LayoutValues.

Example:&lt;code&gt;
Log(GetDeviceLayoutValues)&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.keywords.LayoutValues</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CallSub" RaisesSynchronousEvents="true">CallSubNew</name>
            <comment>Calls the given sub. CallSub can be used to call a sub which belongs to a different module.
However the sub will only be called if the other module is not paused. In that case an empty string will be returned.
You can use IsPaused to test whether a module is paused.
This means that one activity cannot call a sub of a different activity. As the other activity will be paused for sure.
CallSub allows an activity to call a service sub or a service to call an activity sub.
Note that it is not possible to call subs of code modules.
CallSub can also be used to call subs in the current module. Pass Me as the component in that case.
Example:&lt;code&gt;
CallSub(Main, "RefreshData")&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Component</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Sub</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>StartActivity</name>
            <comment>Starts an activity or brings it to front if it already exists.
The target activity will be started once the program is free to process its message queue.
Activity can be a string with the target activity name or it can be the actual activity.
After this call the current activity will be paused and the target activity will be resumed.
This method can also be used to send Intents objects to the system.
Note that you should usually not call StartActivity from a Service.
Example: StartActivity (Activity2)</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Activity</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>InputListAsync</name>
            <comment>Shows a non-modal dialog with a list of items and radio buttons. Pressing on an item will close the dialog.
Returns the index of the selected item or DialogResponse.Cancel if the user pressed on the back key.
The InputList_Result event will be raised with the result.
List - Items to display.
Title - Dialog title.
CheckedItem - The index of the item that will first be selected. Pass -1 if no item should be preselected.
Cancelable - If true then the dialog can be canceled by clicking on the back key or outside the dialog.
The object returned can be used as the Sender Filter parameter of Wait For.
Example: &lt;code&gt;
Dim options As List = Array("Red", "Green", "Blue")
InputListAsync(options, "Select Color", 0, False)
Wait For InputList_Result (Index As Int)
If Index &lt;&gt; DialogResponse.CANCEL Then
	Log("Selected color: " &amp; options.Get(Index))
End If&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Items</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>CheckedItem</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Cancelable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>StartService</name>
            <comment>Starts the given service. The service will be first created if it was not started before.
The target service will be started once the program is free to process its message queue.
Note that you cannot show a Msgbox after this call and before the service starts.
Service - The service module or the service name.
Example:&lt;code&gt;
StartService(SQLService)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Service</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CallSub3" RaisesSynchronousEvents="true">CallSubNew3</name>
            <comment>Similar to CallSub. Calls a sub with two arguments.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Component</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Sub</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Argument1</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Argument2</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>ATanD</name>
            <comment>Returns the angle measured with degrees.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name DesignerName="CallSub2" RaisesSynchronousEvents="true">CallSubNew2</name>
            <comment>Similar to CallSub. Calls a sub with a single argument.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Component</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Sub</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Argument</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Exit</name>
            <comment>Exits the most inner loop.
Note that Exit inside a Select block will exit the Select block.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name RaisesSynchronousEvents="true">Msgbox</name>
            <comment>Shows a modal message box with the specified message and title.
The dialog will show one OK button.
&lt;b&gt;It is recommended to use MsgboxAsync instead.&lt;/b&gt;
Note that services cannot show dialogs.
Example:&lt;code&gt;
Msgbox("Hello world", "This is the title")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Message</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>Msgbox2Async</name>
            <comment>Shows a non-modal message box with the specified message and title. The Msgbox_Result event will be raised with the result.
Message - The dialog message.
Title - The dialog title.
Positive - The text to show for the "positive" button. Pass "" to hide the button.
Cancel - The text to show for the "cancel" button. Pass "" to hide the button.
Negative - The text to show for the "negative" button. Pass "" to hide the button.
Icon - A bitmap that will be drawn near the title. Pass Null to hide hide the icon.
Cancelable - If true then the dialog can be canceled by clicking on the back key or outside the dialog.
The object returned can be used as the Sender Filter parameter of Wait For.
Example:&lt;code&gt;
Msgbox2Async("Question?", "Title", "Yes", "Cancel", "No", Null, False)
Wait For Msgbox_Result (Result As Int)
If Result = DialogResponse.POSITIVE Then
	'...
End If&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Message</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Positive</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Cancel</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Negative</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Icon</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper.BitmapWrapper</type>
            </parameter>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Cancelable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Sub</name>
            <comment>Declares a sub with the parameters and return type.
Syntax: Sub name [(list of parameters)] [As return-type]
Parameters include name and type.
The lengths of arrays dimensions should not be included.
Example:&lt;code&gt;
Sub MySub (FirstName As String, LastName As String, Age As Int, OtherValues() As Double) As Boolean
 ...
End Sub&lt;/code&gt;
In this example OtherValues is a single dimension array.
The return type declaration is different than other declarations as the array parenthesis follow the type and not
the name (which does not exist in this case).</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Log</name>
            <comment>Logs a message. The log can be viewed in the Logs tab.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Message</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ProgressDialogHide</name>
            <comment>Hides a visible progress dialog. Does not do anything if no progress dialog is visible.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ATan2</name>
            <comment>Returns the angle measured with radians.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Y</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>X</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>CallSubDelayed</name>
            <comment>CallSubDelayed is a combination of StartActivity, StartService and CallSub.
Unlike CallSub which only works with currently running components, CallSubDelayed will first start the target component if needed.
CallSubDelayed can also be used to call subs in the current module. Instead of calling these subs directly, a message will be sent to the message queue.
The sub will be called when the message is processed. This is useful in cases where you want to do something "right after" the current sub (usually related to UI events).
Note that if you call an Activity while the whole application is in the background (no visible activities), the sub will be executed once the target activity is resumed.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Component</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Sub</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>StopService</name>
            <comment>Stops the given service. Service_Destroy will be called. Call StartService afterwards will first create the service.
Service - The service module or service name. Pass empty string to stop the current service (from the service module).
Example:&lt;code&gt;
StopService(SQLService)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Service</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>GetType</name>
            <comment>Returns a string representing the object's java type.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>object</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Sender</name>
            <comment>Returns the object that raised the event.
Only valid while inside the event sub.
Example:&lt;code&gt;
Sub Button_Click
 Dim b As Button
 b = Sender
 b.Text = "I've been clicked"
End Sub&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>StartServiceAt</name>
            <comment>Schedules the given service to start at the given time.
Service - The service module. Pass Me when calling from a service module that schedules itself.
Time - The time to start the service. If this time has already past the service will be started now.
The actual delivery time might change to reduce battery usage. Use StartServiceAtExact if the exact time is important.
DuringSleep - Whether to start the service when the device is sleeping. If set to false and the device is sleeping
at the specified time, the service will be started when the device wakes up.
Setting DuringSleep to True can have a large impact on the battery usage.
StartServiceAt can be used to schedule a repeating task. You should call it under Service_Start to schedule the next task.
This call cancels previous scheduled tasks (for the same service).
Example:&lt;code&gt;
StartServiceAt(SQLService, DateTime.Now + 30 * 1000, false) 'will start after 30 seconds.&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Service</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Time</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>DuringSleep</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Min</name>
            <comment>Returns the smaller number between the two numbers.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Number1</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>Number2</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>MsgboxAsync</name>
            <comment>Shows a non-modal message box with the specified message and title.
The dialog will show one OK button.
Note that services cannot show dialogs.
You can use Wait For to wait for the Msgbox_Result event if you want to continue the code flow after the dialog is dismissed.
Example:&lt;code&gt;
MsgboxAsync("Hello world", "This is the title")&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Message</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>Ceil</name>
            <comment>Returns the smallest double that is greater or equal to the specified number and is equal to an integer.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Number</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>LoadBitmapSample</name>
            <comment>Loads the bitmap.
The decoder will subsample the bitmap if MaxWidth or MaxHeight are smaller than the bitmap dimensions.
This can save a lot of memory when loading large images.
&lt;b&gt;In most cases it is better to use LoadBitmapResize.&lt;/b&gt;
Example:&lt;code&gt;
Activity.SetBackgroundImage(LoadBitmapSample(File.DirAssets, "SomeFile.jpg", Activity.Width, Activity.Height))&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.CanvasWrapper.BitmapWrapper</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>MaxWidth</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>MaxHeight</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>If</name>
            <comment>Single line:
If condition Then true-statement [Else false-statement]
Multiline:
If condition Then
 statement
Else If condition Then
 statement
...
Else
 statement
End If</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name RaisesSynchronousEvents="true">InputList</name>
            <comment>Shows a modal dialog with a list of items and radio buttons. Pressing on an item will close the dialog.
Returns the index of the selected item or DialogResponse.Cancel if the user pressed on the back key.
It is recommended to use InputListAsync instead.
List - Items to display.
Title - Dialog title.
CheckedItem - The index of the item that will first be selected. Pass -1 if no item should be preselected.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Items</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>CheckedItem</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>Max</name>
            <comment>Returns the larger number between the two numbers.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Number1</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>Number2</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Catch</name>
            <comment>Any exception thrown inside a try block will be caught in the catch block.
Call LastException to get the caught exception.
Syntax:
Try
 ...
Catch
 ...
End Try</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ATan2D</name>
            <comment>Returns the angle measured with degrees.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Y</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>X</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Is</name>
            <comment>Tests whether the object is of the given type.
Example:&lt;code&gt;
For i = 0 To Activity.NumberOfViews - 1
  If Activity.GetView(i) Is Button Then
   Dim b As Button
   b = Activity.GetView(i)
   b.Color = Colors.Blue
  End If
Next&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Asc</name>
            <comment>Returns the unicode code point of the given character or first character in string.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Char</name>
                <type>char</type>
            </parameter>
        </method>
        <method>
            <name>Abs</name>
            <comment>Returns the absolute value.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Number</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>IsNumber</name>
            <comment>Tests whether the specified string can be safely parsed as a number.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ExitApplication</name>
            <comment>Immediately ends the application and stops the process.
Most applications should not use this method and prefer Activity.Finish which lets the OS decide when the process is killed.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>PerXToCurrent</name>
            <comment>Returns the actual size of the given percentage of the activity width.
Example:
Button1.Width = PerXToCurrent(50) 'Button1.Width = 50% * Activity.Width

A shorthand syntax for this method is available. Any number followed by the string '%x'
will be converted in the same manner (no spaces are allowed between the number and '%x').
So the previous code is equivalent to:
Button1.Width = 50%x</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Percentage</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>SubExists</name>
            <comment>Tests whether the object includes the specified method.
Returns false if the object was not initialized or not an instance of a user class.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Object</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Sub</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name RaisesSynchronousEvents="true">InputMultiList</name>
            <comment>Shows a modal dialog with a list of items and checkboxes. The user can select multiple items.
The dialog is closed by pressing on the "Ok" button.
Returns a list with the indices of the selected items. The list is sorted.
Returns an empty list if the user has pressed on the back key.</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
            <parameter>
                <name>Items</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>Cos</name>
            <comment>Calculates the trigonometric cosine function. Angle measured in radians.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Radians</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Sqrt</name>
            <comment>Returns the positive square root.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Dim</name>
            <comment>Declares a variable.
Syntax:
Declare a single variable:
Dim variable name [As type] [= expression]
The default type is String.

Declare multiple variables. All variables will be of the specified type.
Dim [Const] variable1 [= expression], variable2 [= expression], ..., [As type]
Note that the shorthand syntax only applies to Dim keyword.
Example:&lt;code&gt;Dim a = 1, b = 2, c = 3 As Int&lt;/code&gt;

Declare an array:
Dim variable(Rank1, Rank2, ...) [As type]
Example:&lt;code&gt;Dim Days(7) As String&lt;/code&gt;
The actual rank can be omitted for zero length arrays.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ProgressDialogShow2</name>
            <comment>Shows a dialog with a circular spinning bar and the specified text.
Unlike Msgbox and InputList methods, the code will not block.
You should call ProgressDialogHide to remove the dialog.
Cancelable - Whether the user can dismiss the dialog by pressing on the Back key.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Cancelable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsDevTool</name>
            <comment>Returns true if ToolName equals B4A.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>ToolName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Type</name>
            <comment>Declares a structure.
Can only be used inside sub Globals or sub Process_Globals.
Syntax:
Type type-name (field1, field2, ...)
Fields include name and type.
Example:&lt;code&gt;
Type MyType (Name As String, Items(10) As Int)
Dim a, b As MyType
a.Initialize
a.Items(2) = 123&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Sleep</name>
            <comment>Pauses the current sub execution and resumes it after the specified time.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Milliseconds</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>InputMapAsync</name>
            <comment>Shows a non-modal dialog with a list of items and checkboxes. The user can select multiple items.
The dialog is closed by pressing on the "Ok" button.
The object returned can be used as the Sender Filter parameter of Wait For.
The items displayed are the map keys. Items with a value of True will be checked.
When the user checks or unchecks an item, the related item value gets updated.
Items - A map object with the items as keys and their checked state as values.
Cancelable - If true then the dialog can be closed by clicking on the back key or outside the dialog (the changes will not be canceled).
Example: &lt;code&gt;
Dim m As Map = CreateMap("Item #1": True, "Item #2": True, "Item #3": False)
InputMapAsync(m, "Select items", True)
Wait For InputMap_Result
Log(m)&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Items</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Cancelable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Select</name>
            <comment>Compares a single value to multiple values.
Example:&lt;code&gt;
Dim value As Int
value = 7
Select value
	Case 1
		Log("One")
	Case 2, 4, 6, 8
		Log("Even")
	Case 3, 5, 7, 9
		Log("Odd larger than one")
	Case Else
		Log("Larger than 9")
End Select&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Power</name>
            <comment>Returns the Base value raised to the Exponent power.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Base</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>Exponent</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Tan</name>
            <comment>Calculates the trigonometric tangent function. Angle measured in radians.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Radians</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>LoadBitmapResize</name>
            <comment>Loads the bitmap and sets its size.
The bitmap scale will be the same as the device scale.
Unlike LoadBitmapSample which requires the container Gravity to be set to FILL, LoadBitmapResize provides better results when the Gravity is set to CENTER. 
Example:&lt;code&gt;
Dim bd As BitmapDrawable = Activity.SetBackgroundImage(LoadBitmapResize(File.DirAssets, "SomeFile.jpg", 100%x, 100%y, True))
bd.Gravity = Gravity.CENTER&lt;/code&gt;
Or:&lt;code&gt;
Activity.SetBackgroundImage(LoadBitmapResize(File.DirAssets, "SomeFile.jpg", 100%x, 100%y, True)).Gravity = Gravity.CENTER&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.CanvasWrapper.BitmapWrapper</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Width</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>Height</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>KeepAspectRatio</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Rnd</name>
            <comment>Returns a random integer between Min (inclusive) and Max (exclusive).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Min</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Max</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Chr</name>
            <comment>Returns the character that is represented by the given unicode value.</comment>
            <returntype>char</returntype>
            <parameter>
                <name>UnicodeValue</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>LoadBitmap</name>
            <comment>Loads the bitmap.
Note that the Android file system is case sensitive.
You should consider using LoadBitmapSample if the image size is large.
The actual file size is not relevant as images are usually stored compressed.
Example:&lt;code&gt;
Activity.SetBackgroundImage(LoadBitmap(File.DirAssets, "SomeFile.jpg"))&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.objects.drawable.CanvasWrapper.BitmapWrapper</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ProgressDialogShow</name>
            <comment>Shows a dialog with a circular spinning bar and the specified text.
Unlike Msgbox and InputList methods, the code will not block.
You should call ProgressDialogHide to remove the dialog.
The dialog will also be removed if the user presses on the Back key.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>ACos</name>
            <comment>Returns the angle measured with radians.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Try</name>
            <comment>Any exception thrown inside a try block will be caught in the catch block.
Call LastException to get the caught exception.
Syntax:
Try
 ...
Catch
 ...
End Try</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>CosD</name>
            <comment>Calculates the trigonometric cosine function. Angle measured in degrees.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Degrees</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>For</name>
            <comment>Syntax:
For variable = value1 To value2 [Step interval]
 ...
Next
If the iterator variable was not declared before it will be of type Int.

Or:
For Each variable As type In collection
 ...
Next
Examples:&lt;code&gt;
For i = 1 To 10
 Log(i) 'Will print 1 to 10 (inclusive).
Next
For Each n As Int In Numbers 'an array
 Sum = Sum + n
Next
&lt;/code&gt;
Note that the loop limits will only be calculated once before the first iteration.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SinD</name>
            <comment>Calculates the trigonometric sine function. Angle measured in degrees.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Degrees</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>IsPaused</name>
            <comment>Tests whether the given component is paused. Will also return true for components that were not started yet.
Example:&lt;code&gt;
If IsPaused(Main) = False Then CallSub(Main, "RefreshData")&lt;/code&gt;</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Component</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Not</name>
            <comment>Inverts the value of the given boolean.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Value</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name RaisesSynchronousEvents="true">DoEvents</name>
            <comment>&lt;b&gt;DoEvents is deprecated.&lt;/b&gt; It can lead to stability issues.
Consider using Sleep(0) instead.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ConfigureHomeWidget</name>
            <comment>Creates a RemoteViews object based on the layout file. The compiler will generate the required XML files based on the parameters.
See the widgets tutorial for more information: &lt;link&gt;Widgets tutorial|http://www.basic4ppc.com/forum/basic4android-getting-started-tutorials/10166-android-home-screen-widgets-tutorial-part-i.html&lt;/link&gt;.
Note that all parameters must be strings or numbers as they are read by the compiler.
LayoutFile - The widget layout file.
EventName - Sets the subs that will handle the RemoteViews events.
UpdateIntervalMinutes - Sets the update interval. Pass 0 to disable automatic updates. Minimum value is 30 (or 0).
WidgetName - The name of the widget as appears in the widgets list.
CenterWidget - Whether to center the widget.</comment>
            <returntype>android.widget.RemoteViews</returntype>
            <parameter>
                <name>LayoutFile</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>UpdateIntervalMinutes</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>WidgetName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>CenterWidget</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Me</name>
            <comment>For classes: returns a reference to the current instance.
For activities and services: returns a reference to an object that can be used with CallSub, CallSubDelayed and SubExists keywords.
Cannot be used in code modules.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>Sin</name>
            <comment>Calculates the trigonometric sine function. Angle measured in radians.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Radians</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name RaisesSynchronousEvents="true">InputMap</name>
            <comment>Shows a modal dialog with a list of items and checkboxes. The user can select multiple items.
The dialog is closed by pressing on the "Ok" button. The InputMap_Result event will be raised.
It is recommended to use InputMapAsync instead.
The items displayed are the map keys. Items with a value of True will be checked.
When the user checks or unchecks an item, the related item value gets updated.
Items - A map object with the items as keys and their checked state as values.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Items</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>CreateMap</name>
            <comment>Creates a Map with the given key / value pairs.
The syntax is: CreateMap (key1: value1, key2: value2, ...)
Example: &lt;code&gt;
Dim m As Map = CreateMap("January": 1, "February": 2)&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ATan</name>
            <comment>Returns the angle measured with radians.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>LastException</name>
            <comment>Returns the last exception that was caught (if such exists).</comment>
            <returntype>anywheresoftware.b4a.objects.B4AException</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>TanD</name>
            <comment>Calculates the trigonometric tangent function. Angle measured in degrees.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Degrees</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Round2</name>
            <comment>Rounds the given number and leaves up to the specified number of fractional digits.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Number</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>DecimalPlaces</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>NumberFormat2</name>
            <comment>Converts the specified number to a string. 
The string will include at least Minimum Integers, at most Maximum Fractions digits and at least Minimum Fractions digits.
GroupingUsed - Determines whether to group every three integers.
Example:&lt;code&gt;
Log(NumberFormat2(12345.67, 0, 3, 3, false)) '"12345.670"&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Number</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>MinimumIntegers</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>MaximumFractions</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>MinimumFractions</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>GroupingUsed</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>ASin</name>
            <comment>Returns the angle measured with radians.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>CharsToString</name>
            <comment>Creates a new String by copying the characters from the array.
Copying starts from StartOffset and the number of characters copied equals to Length.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Chars</name>
                <type>char[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ACosD</name>
            <comment>Returns the angle measured with degrees.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>DipToCurrent</name>
            <comment>Scales the value, which represents a specific length on a default density device (Density = 1.0),
to the current device.
For example, the following code will set the width value of this button to be the same physical size
on all devices.
Button1.Width = DipToCurrent(100)

Note that a shorthand syntax for this method is available. Any number followed by the string 'dip'
will be converted in the same manner (no spaces are allowed between the number and 'dip').
So the previous code is equivalent to:
Button1.Width = 100dip 'dip -&gt; density independent pixel</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>LogColor</name>
            <comment>Logs a message. The message will be displayed in the IDE with the specified color.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Message</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Continue</name>
            <comment>Stops executing the current iteration and continues with the next one.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SmartStringFormatter</name>
            <comment>Internal keyword used by the Smart String literal.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Format</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Value</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Logarithm</name>
            <comment></comment>
            <returntype>double</returntype>
            <parameter>
                <name>Number</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>Base</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Round</name>
            <comment>Returns the closest long number to the given number.</comment>
            <returntype>long</returntype>
            <parameter>
                <name>Number</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>ToastMessageShow</name>
            <comment>Shows a quick little message that goes out automatically.
Message - The text message to show.
LongDuration - If true then shows the message for a long period, otherwise shows the message for a short period.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Message</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>LongDuration</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>BytesToString</name>
            <comment>Decodes the given bytes array as a string.
Data - The bytes array.
StartOffset - The first byte to read.
Length - Number of bytes to read.
CharSet - The name of the character set.
Example:&lt;code&gt;
Dim s As String
s = BytesToString(Buffer, 0, Buffer.Length, "UTF-8")&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Data</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>StartOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Length</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CharSet</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Until</name>
            <comment>Loops until the condition is true.
 Syntax:
 Do Until condition
  ...
 Loop</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>CancelScheduledService</name>
            <comment>Cancels previously scheduled tasks for this service.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Service</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Floor</name>
            <comment>Returns the largest double that is smaller or equal to the specified number and is equal to an integer.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Number</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>Return</name>
            <comment>Returns from the current sub and optionally returns the given value.
Syntax: Return [value]</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>While</name>
            <comment>Loops while the condition is true.
 Syntax:
 Do While condition
  ...
 Loop</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Array</name>
            <comment>Creates a single dimension array of the specified type.
The syntax is: Array [As type] (list of values).
If the type is ommitted then an array of objects will be created.
Example:&lt;code&gt;
Dim Days() As String
Days = Array As String("Sunday", "Monday", ...)&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsBackgroundTaskRunning</name>
            <comment>Tests whether a background task, submitted by the container object and with the specified id, is running.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>ContainerObject</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>TaskId</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ASinD</name>
            <comment>Returns the angle measured with degrees.</comment>
            <returntype>double</returntype>
            <parameter>
                <name>Value</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>StartServiceAtExact</name>
            <comment>Same as StartServiceAt for Android versions up to 4.3 (API 18).
On Android 4.4+ it forces the OS to start the service at the exact time. This method will have a larger impact on the battery compared
to StartServiceAt and should only be used in cases where it is important for the service to start at the exact time.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mine</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Service</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Time</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>DuringSleep</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name RaisesSynchronousEvents="true">Msgbox2</name>
            <comment>Shows a modal message box with the specified message and title.
 &lt;b&gt;It is recommended to use Msgbox2Async instead.&lt;/b&gt;
Message - The dialog message.
Title - The dialog title.
Positive - The text to show for the "positive" button. Pass "" to hide the button.
Cancel - The text to show for the "cancel" button. Pass "" to hide the button.
Negative - The text to show for the "negative" button. Pass "" to hide the button.
Icon - A bitmap that will be drawn near the title. Pass Null to hide hide the icon.
Returns one of the DialogResponse values.
Example:&lt;code&gt;
Dim result As Int
result = Msgbox2("This is the message", "This is the title", "Good", "", "Bad", LoadBitmap(File.DirAssets, "smiley.gif"))
If result = DialogResponse.Positive Then ...
&lt;/code&gt;</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Message</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Title</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Positive</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Cancel</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Negative</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Icon</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>NumberFormat</name>
            <comment>Converts the specified number to a string. 
The string will include at least Minimum Integers and at most Maximum Fractions digits.
Example:&lt;code&gt;
Log(NumberFormat(12345.6789, 0, 2)) '"12,345.68"
Log(NumberFormat(1, 3 ,0)) '"001"&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Number</name>
                <type>double</type>
            </parameter>
            <parameter>
                <name>MinimumIntegers</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>MaximumFractions</name>
                <type>int</type>
            </parameter>
        </method>
        <field>
            <name>QUOTE</name>
            <comment>Quote character. The value of Chr(34).</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>Null</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
        </field>
        <field>
            <name>cE</name>
            <comment>e (natural logarithm base) constant.</comment>
            <returntype>double</returntype>
        </field>
        <field>
            <name>Typeface</name>
            <comment>Typeface related methods.</comment>
            <returntype>anywheresoftware.b4a.keywords.constants.TypefaceWrapper</returntype>
        </field>
        <field>
            <name>True</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </field>
        <field>
            <name>False</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </field>
        <field>
            <name>KeyCodes</name>
            <comment>Key codes constants.</comment>
            <returntype>anywheresoftware.b4a.keywords.constants.KeyCodes</returntype>
        </field>
        <field>
            <name>Bit</name>
            <comment>Bitwise related methods.</comment>
            <returntype>anywheresoftware.b4a.keywords.Bit</returntype>
        </field>
        <field>
            <name>Density</name>
            <comment>Returns the device scale, which is DPI / 160.
(DPI stands for dots per inch).</comment>
            <returntype>float</returntype>
        </field>
        <field>
            <name>DialogResponse</name>
            <comment>Dialogs related constants.</comment>
            <returntype>anywheresoftware.b4a.keywords.constants.DialogResponse</returntype>
        </field>
        <field>
            <name>DateTime</name>
            <comment>Date and time related methods.</comment>
            <returntype>anywheresoftware.b4a.keywords.DateTime</returntype>
        </field>
        <field>
            <name>Colors</name>
            <comment>Colors related methods and constants.</comment>
            <returntype>anywheresoftware.b4a.keywords.constants.Colors</returntype>
        </field>
        <field>
            <name>TAB</name>
            <comment>Tab character.</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>Regex</name>
            <comment>Regular expressions related methods.</comment>
            <returntype>anywheresoftware.b4a.keywords.Regex</returntype>
        </field>
        <field>
            <name>CRLF</name>
            <comment>New line character. The value of Chr(10).</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>cPI</name>
            <comment>PI constant.</comment>
            <returntype>double</returntype>
        </field>
        <field>
            <name>File</name>
            <comment>Files related methods.</comment>
            <returntype>anywheresoftware.b4a.objects.streams.File</returntype>
        </field>
        <field>
            <name>Application</name>
            <comment>Application related properties.</comment>
            <returntype>anywheresoftware.b4a.keywords.B4AApplication</returntype>
        </field>
        <field>
            <name>Gravity</name>
            <comment>Gravity constants.</comment>
            <returntype>anywheresoftware.b4a.keywords.constants.Gravity</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.keywords.Common.ResumableSubWrapper</name>
        <shortname>ResumableSub</shortname>
        <comment>This object is returned from a call to a non-void resumable sub.
You can use it as the sender filter parameter and wait for the Complete event.</comment>
        <objectwrapper>anywheresoftware.b4a.BA.ResumableSub</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Completed</name>
            <returntype>boolean</returntype>
            <comment>Tests whether the resumable sub has already completed.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.keywords.Bit</name>
        <comment>Bit is a predefined object containing bitwise related methods.
Example:&lt;code&gt;
Dim flags As Int
flags = Bit.Or(100, 200)&lt;/code&gt;</comment>
        <owner>process</owner>
        <method>
            <name>ShiftRight</name>
            <comment>Shifts N right.
Keeps the original value sign
Shift - Number of positions to shift.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>N</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Shift</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Or</name>
            <comment>Returns the bitwise OR of the two values.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>N1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>N2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ShiftLeft</name>
            <comment>Shifts N left.
Shift - Number of positions to shift.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>N</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Shift</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>UnsignedShiftRight</name>
            <comment>Shifts N right.
Shifts zeroes in the leftmost positions.
Shift - Number of positions to shift.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>N</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Shift</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ToOctalString</name>
            <comment>Returns a string representation of N in base 8.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>N</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ToHexString</name>
            <comment>Returns a string representation of N in base 16.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>N</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Not</name>
            <comment>Returns the bitwise complement of the given value.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>N</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ToBinaryString</name>
            <comment>Returns a string representation of N in base 2.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>N</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ArrayCopy</name>
            <comment>Copies elements from SrcArray to DestArray.
SrcArray - Source array.
SrcOffset - Index of first element in the source array.
DestArray - Destination array.
DestOffset - Index of the first element in the destination array.
Count - Number of elements to copy.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>SrcArray</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>SrcOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>DestArray</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>DestOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Count</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>And</name>
            <comment>Returns the bitwise AND of the two values.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>N1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>N2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Xor</name>
            <comment>Returns the bitwise XOR of the two values.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>N1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>N2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ParseInt</name>
            <comment>Parses Value as an integer using the specified radix.
Radix - Should be between 2 to 36.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Value</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Radix</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>InputStreamToBytes</name>
            <comment>Reads the data from the input stream and writes it into an array of bytes.
The input stream is automatically closed at the end.</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>In</name>
                <type>java.io.InputStream</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>anywheresoftware.b4a.keywords.B4AApplication</name>
        <owner>process</owner>
        <property>
            <name>VersionCode</name>
            <returntype>int</returntype>
            <comment>Returns the application version code (VersionCode attribute).</comment>
        </property>
        <property>
            <name>PackageName</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the application package name.</comment>
        </property>
        <property>
            <name>LabelName</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the application name (ApplicationLabel attribute).</comment>
        </property>
        <property>
            <name>VersionName</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the application version name (VersionName attribute).</comment>
        </property>
        <property>
            <name>Icon</name>
            <returntype>anywheresoftware.b4a.objects.drawable.CanvasWrapper.BitmapWrapper</returntype>
            <comment>Returns the application icon.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.keywords.constants.TypefaceWrapper</name>
        <shortname>Typeface</shortname>
        <comment>Typeface is a predefined object that holds the typeface styles and the default installed fonts.
Note that unlike most other predefined objects, you can declare new objects of this type.
Example:&lt;code&gt;
EditText1.Typeface = Typeface.DEFAULT_BOLD&lt;/code&gt;</comment>
        <objectwrapper>android.graphics.Typeface</objectwrapper>
        <owner>process</owner>
        <method>
            <name>CreateNew</name>
            <comment>Returns a typeface with the specified style.
Example:&lt;code&gt;
Typeface.CreateNew(Typeface.MONOSPACE, Typeface.STYLE_ITALIC)&lt;/code&gt;</comment>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>Typeface1</name>
                <type>android.graphics.Typeface</type>
            </parameter>
            <parameter>
                <name>Style</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>LoadFromAssets</name>
            <comment>Loads a font file, that was added with the file manager.
Example:&lt;code&gt;
Dim MyFont As Typeface
MyFont = Typeface.LoadFromAssets("MyFont.ttf")
EditText1.Typeface = MyFont&lt;/code&gt;</comment>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>MATERIALICONS</name>
            <returntype>android.graphics.Typeface</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FONTAWESOME</name>
            <returntype>android.graphics.Typeface</returntype>
            <comment></comment>
        </property>
        <field>
            <name>STYLE_BOLD_ITALIC</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>STYLE_NORMAL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>STYLE_ITALIC</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>DEFAULT_BOLD</name>
            <comment></comment>
            <returntype>android.graphics.Typeface</returntype>
        </field>
        <field>
            <name>MONOSPACE</name>
            <comment></comment>
            <returntype>android.graphics.Typeface</returntype>
        </field>
        <field>
            <name>STYLE_BOLD</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>DEFAULT</name>
            <comment></comment>
            <returntype>android.graphics.Typeface</returntype>
        </field>
        <field>
            <name>SANS_SERIF</name>
            <comment></comment>
            <returntype>android.graphics.Typeface</returntype>
        </field>
        <field>
            <name>SERIF</name>
            <comment></comment>
            <returntype>android.graphics.Typeface</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.keywords.constants.KeyCodes</name>
        <comment>A predefined object with the key codes constants. These constants are passed to Activity KeyPressed event for example.</comment>
        <owner>process</owner>
        <field>
            <name>KEYCODE_ALT_RIGHT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_MEDIA_REWIND</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_SYM</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_AT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_DPAD_UP</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_MINUS</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_ENVELOPE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_DPAD_DOWN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_COMMA</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_EQUALS</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_Y</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_DPAD_LEFT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_Z</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_W</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_X</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_UNKNOWN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_U</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_V</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_MEDIA_FAST_FORWARD</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_S</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_T</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_SHIFT_LEFT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_VOLUME_UP</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_LEFT_BRACKET</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_PLUS</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_BACKSLASH</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_MUTE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_ENDCALL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_CLEAR</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_GRAVE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_HEADSETHOOK</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_POWER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_POUND</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_DPAD_CENTER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_NUM</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_EXPLORER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_SLASH</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_BACK</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_1</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_2</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_SHIFT_RIGHT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_SEMICOLON</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_0</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_DEL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_CALL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_NOTIFICATION</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_MEDIA_PREVIOUS</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_MEDIA_PLAY_PAUSE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_VOLUME_DOWN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_RIGHT_BRACKET</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_SPACE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_STAR</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_I</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_J</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_G</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_PERIOD</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_H</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_E</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_MEDIA_STOP</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_F</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_C</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_D</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_Q</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_R</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_SOFT_LEFT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_O</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_P</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_M</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_N</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_ENTER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_K</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_SOFT_RIGHT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_L</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_9</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_APOSTROPHE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_MENU</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_MEDIA_NEXT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_TAB</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_HOME</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_7</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_FOCUS</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_8</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_ALT_LEFT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_5</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_6</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_CAMERA</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_3</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_SEARCH</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_4</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_A</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_B</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEYCODE_DPAD_RIGHT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.keywords.constants.Gravity</name>
        <comment>Predefined object containing "gravity" values.
These values affect the alignment of text or images.
Example:&lt;code&gt;
Dim EditText1 As EditText
EditText1.Initialize("")
EditText1.Gravity = Gravity.CENTER&lt;/code&gt;</comment>
        <owner>process</owner>
        <field>
            <name>CENTER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NO_GRAVITY</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FILL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TOP</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>LEFT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CENTER_HORIZONTAL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RIGHT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>BOTTOM</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CENTER_VERTICAL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.keywords.constants.DialogResponse</name>
        <comment>A predefined object containing the possible values that dialogs return.
For example:&lt;code&gt;
Dim result As Int
result = Msgbox2("Save changes?", "", "Yes", "", "No", Null)
If result = DialogResponse.POSITIVE Then
	'save changes
End If&lt;/code&gt;</comment>
        <owner>process</owner>
        <field>
            <name>POSITIVE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CANCEL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NEGATIVE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.keywords.constants.Colors</name>
        <comment>A predefined object containing color constants.
For example: &lt;code&gt;Activity.Color = Colors.Green&lt;/code&gt;</comment>
        <owner>process</owner>
        <method>
            <name>ARGB</name>
            <comment>Returns an integer value representing the color built from the three components and with the specified alpha value.
Each component should be a value between 0 to 255 (inclusive)
Alpha - A value between 0 to 255 where 0 is fully transparent and 255 is fully opaque.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Alpha</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>R</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>G</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>B</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>RGB</name>
            <comment>Returns an integer value representing the color built from the three components.
Each component should be a value between 0 to 255 (inclusive)
Alpha is implicitly set to 255 (opaque).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>R</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>G</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>B</name>
                <type>int</type>
            </parameter>
        </method>
        <field>
            <name>Red</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Gray</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>DarkGray</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>LightGray</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>White</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Cyan</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Transparent</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Blue</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Yellow</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Magenta</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Black</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Green</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <version>8.8</version>
    <customClass>name:Standard Class, filenamewithoutextension:standard, priority:1000</customClass>
    <customClass>name:Custom View, filenamewithoutextension:customview</customClass>
</root>
