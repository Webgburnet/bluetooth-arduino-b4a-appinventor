<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>anywheresoftware.b4a.objects.Serial</name>
        <shortname>Serial</shortname>
        <comment>The Serial library allows you to connect with other Bluetooth devices using RFCOMM, also named virtual serial port.
&lt;b&gt;This library requires Android 2.0 (API level 5) or above&lt;/b&gt;.
The Serial object should be declared as a process global object.
After initializing the object you can connect to other devices by calling Connect with the target device MAC address.
This can be done by first getting the paired devices map. This map contains the friendly name and address of each paired device.
To allow other devices to connect to your device you should call Listen. When a connection is established the Connected event will be raised.
There is no problem with both listening to connections and trying to connect to a different device (this allows you to use the same application on two devices without defining a server and client).
A Serial object can handle a single connection. If a new connection is established, it will replace the previous one.
See this &lt;link&gt;tutorial|http://www.basic4ppc.com/forum/basic4android-getting-started-tutorials/6908-android-serial-tutorial.html&lt;/link&gt; for more information.</comment>
        <owner CheckForReinitialize="true">process</owner>
        <event>Connected (Success As Boolean)</event>
        <permission>android.permission.BLUETOOTH</permission>
        <permission>android.permission.BLUETOOTH_ADMIN</permission>
        <method>
            <name>GetPairedDevices</name>
            <comment>Returns a map with the paired devices friendly names as keys and addresses as values.
The following code shows a list of available devices and allows the user to connect to one:&lt;code&gt;
Dim PairedDevices As Map
PairedDevices = Serial1.GetPairedDevices
Dim l As List
l.Initialize
For i = 0 To PairedDevices.Size - 1
	l.Add(PairedDevices.GetKeyAt(i))
Next
Dim res As Int
res = InputList(l, "Choose device", -1) 'show list with paired devices
If res &lt;&gt; DialogResponse.CANCEL Then
	Serial1.Connect(PairedDevices.Get(l.Get(res))) 'convert the name to mac address and connect
End If&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
        </method>
        <method>
            <name>ListenInsecure</name>
            <comment>Starts listening for incoming unencrypted connections.
Admin - An object of type BluetoothAdmin.
Port - The RFCOMM channel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Admin</name>
                <type>anywheresoftware.b4a.objects.Serial.BluetoothAdmin</type>
            </parameter>
            <parameter>
                <name>Port</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsEnabled</name>
            <comment>Tests whether the Bluetooth is enabled.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Connect</name>
            <comment>Tries to connect to a device with the given address. The connection is done in the background.
The Connected event will be raised when the connection is ready (or fails).
The UUID used for the connection is the default UUID: 00001101-0000-1000-8000-00805F9B34FB.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>MacAddress</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>StopListening</name>
            <comment>Stops listening for incoming connections.
This will not disconnect any active connection.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Listen</name>
            <comment>Starts listening for incoming connections using the default UUID.
The Connected event will be raised when the connection is established.
Nothing happens if the device already listens for connections.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initialized the object. You may want to call IsEnabled before trying to work with the object.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Disconnect</name>
            <comment>Disconnects the connection (if such exists) and stops listening for new connections.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Listen2</name>
            <comment>Starts listening for incoming connections.
The Connected event will be raised when the connection is established.
Nothing happens if the device already listens for connections.
Name - An arbitrary string that will be used for internal registration.
UUID - The UUID defined for this record.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>UUID</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>Connect3</name>
            <comment>This method is a workaround for hardware devices that do not connect with Connect or Connect2.
See this &lt;link&gt;issue|http://code.google.com/p/android/issues/detail?id=5427&lt;/link&gt; for more information.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>MacAddress</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Port</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ConnectInsecure</name>
            <comment>Tries to connect to a device over an unencrypted connection.
Admin - Object of type BluetoothAdmin.
MacAddress - The address of the remote device.
Port - RCOMM channel.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Admin</name>
                <type>anywheresoftware.b4a.objects.Serial.BluetoothAdmin</type>
            </parameter>
            <parameter>
                <name>MacAddress</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Port</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Connect2</name>
            <comment>Tries to connect to a device with the given address and UUID. The connection is done in the background.
The Connected event will be raised when the connection is ready (or fails).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>MacAddress</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>UUID</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>Address</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the current device MAC address.</comment>
        </property>
        <property>
            <name>InputStream</name>
            <returntype>java.io.InputStream</returntype>
            <comment>Returns the InputStream that is used to read data from the other device.
Should be called after a connection is established.</comment>
        </property>
        <property>
            <name>OutputStream</name>
            <returntype>java.io.OutputStream</returntype>
            <comment>Returns the OutputStream that is used to write data to the other device.
Should be called after a connection is established.</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the current device friendly name.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.objects.Serial.BluetoothAdmin</name>
        <shortname>BluetoothAdmin</shortname>
        <comment>BluetoothAdmin allows you to administrate the Bluetooth adapter.
Using this object you can enable or disable the adapter, monitor its state and discover devices in range.
DiscoveryStarted and DiscoveryFinished events are raised when a discovery process starts or finishes.
StateChanged event is raised whenever the adapter state changes. The new state and the previous state are passed.
The values correspond to the STATE_xxxx constants.
DeviceFound event is raised when a device is discovered. The device name and mac address are passed.</comment>
        <owner>process</owner>
        <event>StateChanged (NewState As Int, OldState As Int)</event>
        <event>DiscoveryStarted</event>
        <event>DiscoveryFinished</event>
        <event>DeviceFound (Name As String, MacAddress As String)</event>
        <permission>android.permission.BLUETOOTH</permission>
        <permission>android.permission.BLUETOOTH_ADMIN</permission>
        <permission>android.permission.ACCESS_COARSE_LOCATION</permission>
        <method>
            <name>StartDiscovery</name>
            <comment>Starts a discovery process. You should handle DiscoveryStarted, DiscoveryFinished and DeviceFound events to get more information about the process.
Returns False if the operation has failed.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>CancelDiscovery</name>
            <comment>Cancels a discovery process.
Returns False if the operation has failed.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>IsEnabled</name>
            <comment>Tests whether the Bluetooth adapter is enabled.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Enable</name>
            <comment>Turns on the Bluetooth adapter. The adapter will not be immediately ready. You should use the StateChanged event to find when it is enabled.
This method returns False if the adapter cannot be enabled.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment>Tests whether the object is initialized.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initializes the object and sets the subs that will handle the events.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Disable</name>
            <comment>Turns off the Bluetooth adapter. The adapter will not be immediately disabled. You should use the StateChanged event to monitor the adapter.
This method returns False if the adapter cannot be disabled.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>LastFoundIntent</name>
            <returntype>anywheresoftware.b4a.objects.IntentWrapper</returntype>
            <comment>Can be used inside the DeviceFound event to extract more data from the intent received. Returns an uninitialized object if no intent was received.</comment>
        </property>
        <field>
            <name>STATE_TURNING_OFF</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>STATE_ON</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>STATE_OFF</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>STATE_TURNING_ON</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <version>1.31</version>
</root>
